{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\n\nvar path = require('path'); //var noop = function () {};\n// keeping the function signature Promise-friendly\n\n\nfunction mkdirp(opts, cb) {\n  //if (!cb) { cb = noop; }\n  if ('string' === typeof opts) {\n    opts = {\n      name: opts\n    };\n  }\n\n  if (!opts || !opts.name || 'string' !== typeof opts.name) {\n    cb(new Error(\"mkdirp missing opts.name\"));\n    return;\n  } // normalize doesn't account for \"../my-sibling/my-neice\"\n\n\n  opts.name = path.resolve(opts.name);\n  fs.mkdir(opts.name, function (err) {\n    // All's well if all's well\n    if (!err) {\n      cb(null, null);\n      return;\n    }\n\n    if ('ENOENT' === err.code) {\n      // The only error we care about is the error that we can ostensibly fix\n      // (same on Windows, Mac, Linux)\n      var name = opts.name;\n      opts.name = path.dirname(opts.name);\n      mkdirp(opts, function (err) {\n        if (err) {\n          cb(err);\n          return;\n        }\n\n        opts.name = name;\n        mkdirp(opts, cb);\n      });\n    } else {\n      // Any other error could be something normal and fairly cross platform (like EEXIST),\n      // but it could also be something random and weird and platform specific that doesn't\n      // actually matter, so we just carry on and try anyway.\n      fs.stat(opts.name, function (_err, stat) {\n        // if we don't succeed, propagate the original error (which will be more meaningful)\n        if (_err || !stat.isDirectory()) {\n          cb(err);\n          return;\n        }\n\n        cb(null, null);\n      });\n    }\n  });\n}\n\nmodule.exports = mkdirp;","map":{"version":3,"sources":["/home/neil/Desktop/Programming/LetsCodeSBISD/Forwarder/node_modules/@root/mkdirp/mkdirp.js"],"names":["fs","require","path","mkdirp","opts","cb","name","Error","resolve","mkdir","err","code","dirname","stat","_err","isDirectory","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB,C,CACA;AAEA;;;AACA,SAASE,MAAT,CAAgBC,IAAhB,EAAsBC,EAAtB,EAA0B;AACxB;AACA,MAAI,aAAa,OAAOD,IAAxB,EAA8B;AAC5BA,IAAAA,IAAI,GAAG;AAAEE,MAAAA,IAAI,EAAEF;AAAR,KAAP;AACD;;AAED,MAAI,CAACA,IAAD,IAAS,CAACA,IAAI,CAACE,IAAf,IAAuB,aAAa,OAAOF,IAAI,CAACE,IAApD,EAA0D;AACxDD,IAAAA,EAAE,CAAC,IAAIE,KAAJ,CAAU,0BAAV,CAAD,CAAF;AACA;AACD,GATuB,CAWxB;;;AACAH,EAAAA,IAAI,CAACE,IAAL,GAAYJ,IAAI,CAACM,OAAL,CAAaJ,IAAI,CAACE,IAAlB,CAAZ;AACAN,EAAAA,EAAE,CAACS,KAAH,CAASL,IAAI,CAACE,IAAd,EAAoB,UAAUI,GAAV,EAAe;AACjC;AACA,QAAI,CAACA,GAAL,EAAU;AAAEL,MAAAA,EAAE,CAAC,IAAD,EAAO,IAAP,CAAF;AAAgB;AAAS;;AAErC,QAAI,aAAaK,GAAG,CAACC,IAArB,EAA2B;AACzB;AACA;AACA,UAAIL,IAAI,GAAGF,IAAI,CAACE,IAAhB;AACAF,MAAAA,IAAI,CAACE,IAAL,GAAYJ,IAAI,CAACU,OAAL,CAAaR,IAAI,CAACE,IAAlB,CAAZ;AACAH,MAAAA,MAAM,CAACC,IAAD,EAAO,UAAUM,GAAV,EAAe;AAC1B,YAAIA,GAAJ,EAAS;AACPL,UAAAA,EAAE,CAACK,GAAD,CAAF;AACA;AACD;;AACDN,QAAAA,IAAI,CAACE,IAAL,GAAYA,IAAZ;AACAH,QAAAA,MAAM,CAACC,IAAD,EAAOC,EAAP,CAAN;AACD,OAPK,CAAN;AAQD,KAbD,MAaO;AACL;AACA;AACA;AACAL,MAAAA,EAAE,CAACa,IAAH,CAAQT,IAAI,CAACE,IAAb,EAAmB,UAAUQ,IAAV,EAAgBD,IAAhB,EAAsB;AACvC;AACA,YAAIC,IAAI,IAAI,CAACD,IAAI,CAACE,WAAL,EAAb,EAAiC;AAC/BV,UAAAA,EAAE,CAACK,GAAD,CAAF;AACA;AACD;;AACDL,QAAAA,EAAE,CAAC,IAAD,EAAO,IAAP,CAAF;AACD,OAPD;AAQD;AACF,GA9BD;AA+BD;;AAEDW,MAAM,CAACC,OAAP,GAAiBd,MAAjB","sourcesContent":["'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\n//var noop = function () {};\n\n// keeping the function signature Promise-friendly\nfunction mkdirp(opts, cb) {\n  //if (!cb) { cb = noop; }\n  if ('string' === typeof opts) {\n    opts = { name: opts };\n  }\n\n  if (!opts || !opts.name || 'string' !== typeof opts.name) {\n    cb(new Error(\"mkdirp missing opts.name\"));\n    return;\n  }\n\n  // normalize doesn't account for \"../my-sibling/my-neice\"\n  opts.name = path.resolve(opts.name);\n  fs.mkdir(opts.name, function (err) {\n    // All's well if all's well\n    if (!err) { cb(null, null); return; }\n\n    if ('ENOENT' === err.code) {\n      // The only error we care about is the error that we can ostensibly fix\n      // (same on Windows, Mac, Linux)\n      var name = opts.name;\n      opts.name = path.dirname(opts.name);\n      mkdirp(opts, function (err) {\n        if (err) {\n          cb(err);\n          return;\n        }\n        opts.name = name;\n        mkdirp(opts, cb);\n      });\n    } else {\n      // Any other error could be something normal and fairly cross platform (like EEXIST),\n      // but it could also be something random and weird and platform specific that doesn't\n      // actually matter, so we just carry on and try anyway.\n      fs.stat(opts.name, function (_err, stat) {\n        // if we don't succeed, propagate the original error (which will be more meaningful)\n        if (_err || !stat.isDirectory()) {\n          cb(err);\n          return;\n        }\n        cb(null, null);\n      });\n    }\n  });\n}\n\nmodule.exports = mkdirp;\n"]},"metadata":{},"sourceType":"script"}