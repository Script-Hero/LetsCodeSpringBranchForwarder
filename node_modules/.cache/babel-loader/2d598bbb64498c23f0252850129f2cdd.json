{"ast":null,"code":"// Copyright 2016-2018 AJ ONeal. All rights reserved\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n'use strict';\n\nvar certInfo = module.exports;\n\nvar ASN1 = require(\"./asn1-parser.js\").ASN1;\n\nvar PEM = require(\"./asn1-parser.js\").PEM;\n\nvar Enc = require(\"./asn1-parser.js\").Enc;\n\nEnc.hexToBuf = function (hex) {\n  return Buffer.from(hex, 'hex');\n};\n\nEnc.bufToUtf8 = function (u8) {\n  return Buffer.from(u8).toString('utf8');\n};\n\ncertInfo.debug = certInfo.getCertInfo = function (pem) {\n  var bytes = PEM.parseBlock(pem).bytes;\n  return ASN1.parse(bytes);\n};\n\ncertInfo.info = certInfo.getBasicInfo = function (pem) {\n  var c = certInfo.getCertInfo(pem); // A cert has 3 parts: cert, signature meta, signature\n\n  if (c.children.length !== 3) {\n    throw new Error(\"doesn't look like a certificate: expected 3 parts of header\");\n  }\n\n  c = c.children[0];\n\n  if (8 !== c.children.length) {\n    throw new Error(\"doesn't look like a certificate: expected 8 parts to certificate\");\n  } // 0:0 value 2\n  // 1 variable-length value\n  // 2:0 sha256 identifier 2:1 null\n  // 3 certificate of issuer C/O/OU/CN\n  // 4:0 notBefore 4:1 notAfter\n\n\n  var nbf = Enc.hexToBuf(c.children[4].children[0].value);\n  var exp = Enc.hexToBuf(c.children[4].children[1].value);\n  nbf = new Date(Date.UTC('20' + nbf.slice(0, 2), nbf.slice(2, 4) - 1, nbf.slice(4, 6), nbf.slice(6, 8), nbf.slice(8, 10), nbf.slice(10, 12)));\n  exp = new Date(Date.UTC('20' + exp.slice(0, 2), exp.slice(2, 4) - 1, exp.slice(4, 6), exp.slice(6, 8), exp.slice(8, 10), exp.slice(10, 12))); // 5 the client C/O/OU/CN, etc\n\n  var sub = c.children[5].children.filter(function (set) {\n    if ('550403' === Enc.bufToHex(set.children[0].children[0].value)) {\n      return true;\n    }\n  }).map(function (set) {\n    return Enc.bufToUtf8(set.children[0].children[1].value);\n  })[0]; // 6 public key\n  // 7 extensions\n\n  var domains = c.children[7].children[0].children.filter(function (seq) {\n    if ('551d11' === Enc.bufToHex(seq.children[0].value)) {\n      return true;\n    }\n  }).map(function (seq) {\n    return seq.children[1].children[0].children.map(function (name) {\n      return Enc.bufToUtf8(name.value);\n    });\n  })[0];\n  return {\n    subject: sub,\n    altnames: domains // for debugging during console.log\n    // do not expect these values to be here\n    ,\n    _issuedAt: nbf,\n    _expiresAt: exp,\n    issuedAt: nbf.valueOf(),\n    expiresAt: exp.valueOf()\n  };\n};\n\ncertInfo.getCertInfoFromFile = function (pemFile) {\n  return require('fs').readFileSync(pemFile, 'ascii');\n};\n/*\ncertInfo.testGetCertInfo = function (pathname) {\n  var path = require('path');\n  var pemFile = pathname || path.join(__dirname, '..', 'tests', 'example.cert.pem');\n  return certInfo.getCertInfo(certInfo.getCertInfoFromFile(pemFile));\n};\n\ncertInfo.testBasicCertInfo = function (pathname) {\n  var path = require('path');\n  var pemFile = pathname || path.join(__dirname, '..', 'tests', 'example.cert.pem');\n  return certInfo.getBasicInfo(certInfo.getCertInfoFromFile(pemFile));\n};\n*/","map":{"version":3,"sources":["/home/neil/Desktop/Programming/LetsCodeSBISD/Forwarder/node_modules/cert-info/lib/cert-info.js"],"names":["certInfo","module","exports","ASN1","require","PEM","Enc","hexToBuf","hex","Buffer","from","bufToUtf8","u8","toString","debug","getCertInfo","pem","bytes","parseBlock","parse","info","getBasicInfo","c","children","length","Error","nbf","value","exp","Date","UTC","slice","sub","filter","set","bufToHex","map","domains","seq","name","subject","altnames","_issuedAt","_expiresAt","issuedAt","valueOf","expiresAt","getCertInfoFromFile","pemFile","readFileSync"],"mappings":"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","sourcesContent":["// Copyright 2016-2018 AJ ONeal. All rights reserved\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n'use strict';\n\nvar certInfo = module.exports;\n\nvar ASN1 = require(\"./asn1-parser.js\").ASN1;\nvar PEM = require(\"./asn1-parser.js\").PEM;\nvar Enc = require(\"./asn1-parser.js\").Enc;\n\nEnc.hexToBuf = function (hex) {\n  return Buffer.from(hex, 'hex');\n};\nEnc.bufToUtf8 = function (u8) {\n  return Buffer.from(u8).toString('utf8');\n};\n\ncertInfo.debug = certInfo.getCertInfo = function (pem) {\n  var bytes = PEM.parseBlock(pem).bytes;\n  return ASN1.parse(bytes);\n};\n\ncertInfo.info = certInfo.getBasicInfo = function (pem) {\n  var c = certInfo.getCertInfo(pem);\n  // A cert has 3 parts: cert, signature meta, signature\n  if (c.children.length !== 3) {\n    throw new Error(\"doesn't look like a certificate: expected 3 parts of header\");\n  }\n  c = c.children[0];\n  if (8 !== c.children.length) {\n    throw new Error(\"doesn't look like a certificate: expected 8 parts to certificate\");\n  }\n  // 0:0 value 2\n  // 1 variable-length value\n  // 2:0 sha256 identifier 2:1 null\n  // 3 certificate of issuer C/O/OU/CN\n  // 4:0 notBefore 4:1 notAfter\n  var nbf = Enc.hexToBuf(c.children[4].children[0].value);\n  var exp = Enc.hexToBuf(c.children[4].children[1].value);\n  nbf = new Date(Date.UTC(\n    '20' + nbf.slice(0, 2)\n  , nbf.slice(2, 4) - 1\n  , nbf.slice(4, 6)\n  , nbf.slice(6, 8)\n  , nbf.slice(8, 10)\n  , nbf.slice(10, 12)\n  ));\n  exp = new Date(Date.UTC(\n    '20' + exp.slice(0, 2)\n  , exp.slice(2, 4) - 1\n  , exp.slice(4, 6)\n  , exp.slice(6, 8)\n  , exp.slice(8, 10)\n  , exp.slice(10, 12)\n  ));\n  // 5 the client C/O/OU/CN, etc\n  var sub = c.children[5].children.filter(function (set) {\n    if ('550403' === Enc.bufToHex(set.children[0].children[0].value)) {\n      return true;\n    }\n  }).map(function (set) {\n    return Enc.bufToUtf8(set.children[0].children[1].value);\n  })[0];\n  // 6 public key\n  // 7 extensions\n  var domains = c.children[7].children[0].children.filter(function (seq) {\n    if ('551d11' === Enc.bufToHex(seq.children[0].value)) {\n      return true;\n    }\n  }).map(function (seq) {\n    return seq.children[1].children[0].children.map(function (name) {\n      return Enc.bufToUtf8(name.value);\n    });\n  })[0];\n\n  return {\n    subject: sub\n  , altnames: domains\n    // for debugging during console.log\n    // do not expect these values to be here\n  , _issuedAt: nbf\n  , _expiresAt: exp\n  , issuedAt: nbf.valueOf()\n  , expiresAt: exp.valueOf()\n  };\n};\n\ncertInfo.getCertInfoFromFile = function (pemFile) {\n  return require('fs').readFileSync(pemFile, 'ascii');\n};\n\n/*\ncertInfo.testGetCertInfo = function (pathname) {\n  var path = require('path');\n  var pemFile = pathname || path.join(__dirname, '..', 'tests', 'example.cert.pem');\n  return certInfo.getCertInfo(certInfo.getCertInfoFromFile(pemFile));\n};\n\ncertInfo.testBasicCertInfo = function (pathname) {\n  var path = require('path');\n  var pemFile = pathname || path.join(__dirname, '..', 'tests', 'example.cert.pem');\n  return certInfo.getBasicInfo(certInfo.getCertInfoFromFile(pemFile));\n};\n*/\n"]},"metadata":{},"sourceType":"script"}