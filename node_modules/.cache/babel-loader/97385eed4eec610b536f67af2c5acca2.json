{"ast":null,"code":"\"use strict\";\n\nvar MFS = require(\"greenlock-manager-fs\"); // TODO @greenlock/manager-cloud\n\n\nvar Manager = module.exports;\n\nManager.create = function (opts) {\n  var mfs = MFS.create(opts);\n  var manager = {}; //\n  // REQUIRED (basic issuance)\n  //\n\n  if (mfs.get) {\n    manager.get = async function ({\n      servername,\n      wildname\n    }) {\n      // (optional) `wildcard` may or may not exist\n      // if *you* support wildcard domains, *you* should handle them\n      return mfs.get({\n        servername,\n        wildname\n      });\n    };\n  } else {\n    // (optional)\n    // because the current version doesn't have get()\n    manager.get = createGetFromFind();\n  } //\n  // REQUIRED (basic issuance)\n  //\n\n\n  manager.set = async function (opts) {\n    return mfs.set(opts);\n  }; //\n  // Optional (Fully Automatic Renewal)\n  //\n\n\n  manager.find = async function (opts) {\n    // { subject, servernames, altnames, renewBefore }\n    return mfs.find(opts);\n  }; //\n  // Optional (Special Remove Functionality)\n  // The default behavior is to set `deletedAt`\n  //\n  //manager.remove = async function(opts) {\n  //\treturn mfs.remove(opts);\n  //};\n  //\n  // Optional (special settings save)\n  // Implemented here because this module IS the fallback\n  //\n\n\n  manager.defaults = async function (opts) {\n    return mfs.defaults(opts);\n  }; //\n  // Optional (for common deps and/or async initialization)\n  //\n\n\n  manager.init = async function (deps) {\n    return mfs.init(deps);\n  };\n\n  return manager; //\n  // IGNORE\n  // Backwards compat for the first versions of greenlock-manager-fs\n  //\n\n  function createGetFromFind() {\n    return async function ({\n      servername,\n      wildname\n    }) {\n      var servernames = [servername];\n\n      if (wildname) {\n        servernames.push(wildname);\n      }\n\n      return mfs.find({\n        servernames: servernames,\n        // because the original manager used altnames here\n        altnames: servernames\n      }).then(function (sites) {\n        return sites[0] || null;\n      });\n    };\n  }\n};","map":{"version":3,"sources":["/home/neil/Desktop/Programming/LetsCodeSBISD/Forwarder/node_modules/@greenlock/manager/manager.js"],"names":["MFS","require","Manager","module","exports","create","opts","mfs","manager","get","servername","wildname","createGetFromFind","set","find","defaults","init","deps","servernames","push","altnames","then","sites"],"mappings":"AAAA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,sBAAD,CAAjB,C,CACA;;;AAEA,IAAIC,OAAO,GAAGC,MAAM,CAACC,OAArB;;AACAF,OAAO,CAACG,MAAR,GAAiB,UAASC,IAAT,EAAe;AAC5B,MAAIC,GAAG,GAAGP,GAAG,CAACK,MAAJ,CAAWC,IAAX,CAAV;AACA,MAAIE,OAAO,GAAG,EAAd,CAF4B,CAI5B;AACA;AACA;;AACA,MAAID,GAAG,CAACE,GAAR,EAAa;AACTD,IAAAA,OAAO,CAACC,GAAR,GAAc,gBAAe;AAAEC,MAAAA,UAAF;AAAcC,MAAAA;AAAd,KAAf,EAAyC;AACnD;AACA;AACA,aAAOJ,GAAG,CAACE,GAAJ,CAAQ;AAAEC,QAAAA,UAAF;AAAcC,QAAAA;AAAd,OAAR,CAAP;AACH,KAJD;AAKH,GAND,MAMO;AACH;AACA;AACAH,IAAAA,OAAO,CAACC,GAAR,GAAcG,iBAAiB,EAA/B;AACH,GAjB2B,CAmB5B;AACA;AACA;;;AACAJ,EAAAA,OAAO,CAACK,GAAR,GAAc,gBAAeP,IAAf,EAAqB;AAC/B,WAAOC,GAAG,CAACM,GAAJ,CAAQP,IAAR,CAAP;AACH,GAFD,CAtB4B,CA0B5B;AACA;AACA;;;AACAE,EAAAA,OAAO,CAACM,IAAR,GAAe,gBAAeR,IAAf,EAAqB;AAChC;AACA,WAAOC,GAAG,CAACO,IAAJ,CAASR,IAAT,CAAP;AACH,GAHD,CA7B4B,CAkC5B;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACAE,EAAAA,OAAO,CAACO,QAAR,GAAmB,gBAAeT,IAAf,EAAqB;AACpC,WAAOC,GAAG,CAACQ,QAAJ,CAAaT,IAAb,CAAP;AACH,GAFD,CA9C4B,CAkD5B;AACA;AACA;;;AACAE,EAAAA,OAAO,CAACQ,IAAR,GAAe,gBAAeC,IAAf,EAAqB;AAChC,WAAOV,GAAG,CAACS,IAAJ,CAASC,IAAT,CAAP;AACH,GAFD;;AAIA,SAAOT,OAAP,CAzD4B,CA2D5B;AACA;AACA;AACA;;AACA,WAASI,iBAAT,GAA6B;AACzB,WAAO,gBAAe;AAAEF,MAAAA,UAAF;AAAcC,MAAAA;AAAd,KAAf,EAAyC;AAC5C,UAAIO,WAAW,GAAG,CAACR,UAAD,CAAlB;;AACA,UAAIC,QAAJ,EAAc;AACVO,QAAAA,WAAW,CAACC,IAAZ,CAAiBR,QAAjB;AACH;;AACD,aAAOJ,GAAG,CACLO,IADE,CACG;AACFI,QAAAA,WAAW,EAAEA,WADX;AAEF;AACAE,QAAAA,QAAQ,EAAEF;AAHR,OADH,EAMFG,IANE,CAMG,UAASC,KAAT,EAAgB;AAClB,eAAOA,KAAK,CAAC,CAAD,CAAL,IAAY,IAAnB;AACH,OARE,CAAP;AASH,KAdD;AAeH;AACJ,CAhFD","sourcesContent":["\"use strict\";\n\nvar MFS = require(\"greenlock-manager-fs\");\n// TODO @greenlock/manager-cloud\n\nvar Manager = module.exports;\nManager.create = function(opts) {\n    var mfs = MFS.create(opts);\n    var manager = {};\n\n    //\n    // REQUIRED (basic issuance)\n    //\n    if (mfs.get) {\n        manager.get = async function({ servername, wildname }) {\n            // (optional) `wildcard` may or may not exist\n            // if *you* support wildcard domains, *you* should handle them\n            return mfs.get({ servername, wildname });\n        };\n    } else {\n        // (optional)\n        // because the current version doesn't have get()\n        manager.get = createGetFromFind();\n    }\n\n    //\n    // REQUIRED (basic issuance)\n    //\n    manager.set = async function(opts) {\n        return mfs.set(opts);\n    };\n\n    //\n    // Optional (Fully Automatic Renewal)\n    //\n    manager.find = async function(opts) {\n        // { subject, servernames, altnames, renewBefore }\n        return mfs.find(opts);\n    };\n\n    //\n    // Optional (Special Remove Functionality)\n    // The default behavior is to set `deletedAt`\n    //\n    //manager.remove = async function(opts) {\n    //\treturn mfs.remove(opts);\n    //};\n\n    //\n    // Optional (special settings save)\n    // Implemented here because this module IS the fallback\n    //\n    manager.defaults = async function(opts) {\n        return mfs.defaults(opts);\n    };\n\n    //\n    // Optional (for common deps and/or async initialization)\n    //\n    manager.init = async function(deps) {\n        return mfs.init(deps);\n    };\n\n    return manager;\n\n    //\n    // IGNORE\n    // Backwards compat for the first versions of greenlock-manager-fs\n    //\n    function createGetFromFind() {\n        return async function({ servername, wildname }) {\n            var servernames = [servername];\n            if (wildname) {\n                servernames.push(wildname);\n            }\n            return mfs\n                .find({\n                    servernames: servernames,\n                    // because the original manager used altnames here\n                    altnames: servernames\n                })\n                .then(function(sites) {\n                    return sites[0] || null;\n                });\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}