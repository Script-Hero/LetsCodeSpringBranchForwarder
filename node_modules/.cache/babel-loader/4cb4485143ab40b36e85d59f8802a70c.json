{"ast":null,"code":"'use strict';\n\nvar U = module.exports;\n\nvar promisify = require('util').promisify; //var resolveSoa = promisify(require('dns').resolveSoa);\n\n\nvar resolveMx = promisify(require('dns').resolveMx);\n\nvar punycode = require('punycode');\n\nvar Keypairs = require('@root/keypairs'); // TODO move to @root\n\n\nvar certParser = require('cert-info');\n\nU._parseDuration = function (str) {\n  if ('number' === typeof str) {\n    return str;\n  }\n\n  var pattern = /^(\\-?\\d+(\\.\\d+)?)([wdhms]|ms)$/;\n  var matches = str.match(pattern);\n\n  if (!matches || !matches[0]) {\n    throw new Error('invalid duration string: ' + str);\n  }\n\n  var n = parseInt(matches[1], 10);\n  var unit = matches[3];\n\n  switch (unit) {\n    case 'w':\n      n *= 7;\n\n    /*falls through*/\n\n    case 'd':\n      n *= 24;\n\n    /*falls through*/\n\n    case 'h':\n      n *= 60;\n\n    /*falls through*/\n\n    case 'm':\n      n *= 60;\n\n    /*falls through*/\n\n    case 's':\n      n *= 1000;\n\n    /*falls through*/\n\n    case 'ms':\n      n *= 1;\n    // for completeness\n  }\n\n  return n;\n};\n\nU._encodeName = function (str) {\n  return punycode.toASCII(str.toLowerCase(str));\n};\n\nU._validName = function (str) {\n  // A quick check of the 38 and two Â½ valid characters\n  // 253 char max full domain, including dots\n  // 63 char max each label segment\n  // Note: * is not allowed, but it's allowable here\n  // Note: _ (underscore) is only allowed for \"domain names\", not \"hostnames\"\n  // Note: - (hyphen) is not allowed as a first character (but a number is)\n  return /^(\\*\\.)?[a-z0-9_\\.\\-]+\\.[a-z0-9_\\.\\-]+$/.test(str) && str.length < 254 && str.split('.').every(function (label) {\n    return label.length > 0 && label.length < 64;\n  });\n};\n\nU._validMx = function (email) {\n  var host = email.split('@').slice(1)[0]; // try twice, just because DNS hiccups sometimes\n  // Note: we don't care if the domain exists, just that it *can* exist\n\n  return resolveMx(host).catch(function () {\n    return U._timeout(1000).then(function () {\n      return resolveMx(host);\n    });\n  });\n}; // should be called after _validName\n\n\nU._validDomain = function (str) {\n  // TODO use @root/dns (currently dns-suite)\n  // because node's dns can't read Authority records\n  return Promise.resolve(str);\n  /*\n  // try twice, just because DNS hiccups sometimes\n  // Note: we don't care if the domain exists, just that it *can* exist\n  return resolveSoa(str).catch(function() {\n  return U._timeout(1000).then(function() {\n  return resolveSoa(str);\n  });\n  });\n  */\n}; // foo.example.com and *.example.com overlap\n// should be called after _validName\n// (which enforces *. or no *)\n\n\nU._uniqueNames = function (altnames) {\n  var dups = {};\n  var wilds = {};\n\n  if (altnames.some(function (w) {\n    if ('*.' !== w.slice(0, 2)) {\n      return;\n    }\n\n    if (wilds[w]) {\n      return true;\n    }\n\n    wilds[w] = true;\n  })) {\n    return false;\n  }\n\n  return altnames.every(function (name) {\n    var w;\n\n    if ('*.' !== name.slice(0, 2)) {\n      w = '*.' + name.split('.').slice(1).join('.');\n    } else {\n      return true;\n    }\n\n    if (!dups[name] && !dups[w]) {\n      dups[name] = true;\n      return true;\n    }\n  });\n};\n\nU._timeout = function (d) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, d);\n  });\n};\n\nU._genKeypair = function (keyType) {\n  var keyopts;\n  var len = parseInt(keyType.replace(/.*?(\\d)/, '$1') || 0, 10);\n\n  if (/RSA/.test(keyType)) {\n    keyopts = {\n      kty: 'RSA',\n      modulusLength: len || 2048\n    };\n  } else if (/^(EC|P\\-?\\d)/i.test(keyType)) {\n    keyopts = {\n      kty: 'EC',\n      namedCurve: 'P-' + (len || 256)\n    };\n  } else {\n    // TODO put in ./errors.js\n    throw new Error('invalid key type: ' + keyType);\n  }\n\n  return Keypairs.generate(keyopts).then(function (pair) {\n    return U._jwkToSet(pair.private);\n  });\n}; // TODO use ACME._importKeypair ??\n\n\nU._importKeypair = function (keypair) {\n  // this should import all formats equally well:\n  // 'object' (JWK), 'string' (private key pem), kp.privateKeyPem, kp.privateKeyJwk\n  if (keypair.private || keypair.d) {\n    return U._jwkToSet(keypair.private || keypair);\n  }\n\n  if (keypair.privateKeyJwk) {\n    return U._jwkToSet(keypair.privateKeyJwk);\n  }\n\n  if ('string' !== typeof keypair && !keypair.privateKeyPem) {\n    // TODO put in errors\n    throw new Error('missing private key');\n  }\n\n  return Keypairs.import({\n    pem: keypair.privateKeyPem || keypair\n  }).then(function (priv) {\n    if (!priv.d) {\n      throw new Error('missing private key');\n    }\n\n    return U._jwkToSet(priv);\n  });\n};\n\nU._jwkToSet = function (jwk) {\n  var keypair = {\n    privateKeyJwk: jwk\n  };\n  return Promise.all([Keypairs.export({\n    jwk: jwk,\n    encoding: 'pem'\n  }).then(function (pem) {\n    keypair.privateKeyPem = pem;\n  }), Keypairs.export({\n    jwk: jwk,\n    encoding: 'pem',\n    public: true\n  }).then(function (pem) {\n    keypair.publicKeyPem = pem;\n  }), Keypairs.publish({\n    jwk: jwk\n  }).then(function (pub) {\n    keypair.publicKeyJwk = pub;\n  })]).then(function () {\n    return keypair;\n  });\n};\n\nU._attachCertInfo = function (results) {\n  var certInfo = certParser.info(results.cert); // subject, altnames, issuedAt, expiresAt\n\n  Object.keys(certInfo).forEach(function (key) {\n    results[key] = certInfo[key];\n  });\n  return results;\n};\n\nU._certHasDomain = function (certInfo, _domain) {\n  var names = (certInfo.altnames || []).slice(0);\n  return names.some(function (name) {\n    var domain = _domain.toLowerCase();\n\n    name = name.toLowerCase();\n\n    if ('*.' === name.substr(0, 2)) {\n      name = name.substr(2);\n      domain = domain.split('.').slice(1).join('.');\n    }\n\n    return name === domain;\n  });\n}; // a bit heavy to be labeled 'utils'... perhaps 'common' would be better?\n\n\nU._getOrCreateKeypair = function (db, subject, query, keyType, mustExist) {\n  var exists = false;\n  return db.checkKeypair(query).then(function (kp) {\n    if (kp) {\n      exists = true;\n      return U._importKeypair(kp);\n    }\n\n    if (mustExist) {\n      // TODO put in errors\n      throw new Error('required keypair not found: ' + (subject || '') + ' ' + JSON.stringify(query));\n    }\n\n    return U._genKeypair(keyType);\n  }).then(function (keypair) {\n    return {\n      exists: exists,\n      keypair: keypair\n    };\n  });\n};\n\nU._getKeypair = function (db, subject, query) {\n  return U._getOrCreateKeypair(db, subject, query, '', true).then(function (result) {\n    return result.keypair;\n  });\n};","map":{"version":3,"sources":["/home/neil/Desktop/Programming/LetsCodeSBISD/Forwarder/node_modules/@root/greenlock/utils.js"],"names":["U","module","exports","promisify","require","resolveMx","punycode","Keypairs","certParser","_parseDuration","str","pattern","matches","match","Error","n","parseInt","unit","_encodeName","toASCII","toLowerCase","_validName","test","length","split","every","label","_validMx","email","host","slice","catch","_timeout","then","_validDomain","Promise","resolve","_uniqueNames","altnames","dups","wilds","some","w","name","join","d","setTimeout","_genKeypair","keyType","keyopts","len","replace","kty","modulusLength","namedCurve","generate","pair","_jwkToSet","private","_importKeypair","keypair","privateKeyJwk","privateKeyPem","import","pem","priv","jwk","all","export","encoding","public","publicKeyPem","publish","pub","publicKeyJwk","_attachCertInfo","results","certInfo","info","cert","Object","keys","forEach","key","_certHasDomain","_domain","names","domain","substr","_getOrCreateKeypair","db","subject","query","mustExist","exists","checkKeypair","kp","JSON","stringify","_getKeypair","result"],"mappings":"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","sourcesContent":["'use strict';\n\nvar U = module.exports;\n\nvar promisify = require('util').promisify;\n//var resolveSoa = promisify(require('dns').resolveSoa);\nvar resolveMx = promisify(require('dns').resolveMx);\nvar punycode = require('punycode');\nvar Keypairs = require('@root/keypairs');\n// TODO move to @root\nvar certParser = require('cert-info');\n\nU._parseDuration = function(str) {\n    if ('number' === typeof str) {\n        return str;\n    }\n\n    var pattern = /^(\\-?\\d+(\\.\\d+)?)([wdhms]|ms)$/;\n    var matches = str.match(pattern);\n    if (!matches || !matches[0]) {\n        throw new Error('invalid duration string: ' + str);\n    }\n\n    var n = parseInt(matches[1], 10);\n    var unit = matches[3];\n\n    switch (unit) {\n        case 'w':\n            n *= 7;\n        /*falls through*/\n        case 'd':\n            n *= 24;\n        /*falls through*/\n        case 'h':\n            n *= 60;\n        /*falls through*/\n        case 'm':\n            n *= 60;\n        /*falls through*/\n        case 's':\n            n *= 1000;\n        /*falls through*/\n        case 'ms':\n            n *= 1; // for completeness\n    }\n\n    return n;\n};\n\nU._encodeName = function(str) {\n    return punycode.toASCII(str.toLowerCase(str));\n};\n\nU._validName = function(str) {\n    // A quick check of the 38 and two Â½ valid characters\n    // 253 char max full domain, including dots\n    // 63 char max each label segment\n    // Note: * is not allowed, but it's allowable here\n    // Note: _ (underscore) is only allowed for \"domain names\", not \"hostnames\"\n    // Note: - (hyphen) is not allowed as a first character (but a number is)\n    return (\n        /^(\\*\\.)?[a-z0-9_\\.\\-]+\\.[a-z0-9_\\.\\-]+$/.test(str) &&\n        str.length < 254 &&\n        str.split('.').every(function(label) {\n            return label.length > 0 && label.length < 64;\n        })\n    );\n};\n\nU._validMx = function(email) {\n    var host = email.split('@').slice(1)[0];\n    // try twice, just because DNS hiccups sometimes\n    // Note: we don't care if the domain exists, just that it *can* exist\n    return resolveMx(host).catch(function() {\n        return U._timeout(1000).then(function() {\n            return resolveMx(host);\n        });\n    });\n};\n\n// should be called after _validName\nU._validDomain = function(str) {\n    // TODO use @root/dns (currently dns-suite)\n    // because node's dns can't read Authority records\n    return Promise.resolve(str);\n    /*\n\t// try twice, just because DNS hiccups sometimes\n\t// Note: we don't care if the domain exists, just that it *can* exist\n\treturn resolveSoa(str).catch(function() {\n\t\treturn U._timeout(1000).then(function() {\n\t\t\treturn resolveSoa(str);\n\t\t});\n\t});\n  */\n};\n\n// foo.example.com and *.example.com overlap\n// should be called after _validName\n// (which enforces *. or no *)\nU._uniqueNames = function(altnames) {\n    var dups = {};\n    var wilds = {};\n    if (\n        altnames.some(function(w) {\n            if ('*.' !== w.slice(0, 2)) {\n                return;\n            }\n            if (wilds[w]) {\n                return true;\n            }\n            wilds[w] = true;\n        })\n    ) {\n        return false;\n    }\n\n    return altnames.every(function(name) {\n        var w;\n        if ('*.' !== name.slice(0, 2)) {\n            w =\n                '*.' +\n                name\n                    .split('.')\n                    .slice(1)\n                    .join('.');\n        } else {\n            return true;\n        }\n\n        if (!dups[name] && !dups[w]) {\n            dups[name] = true;\n            return true;\n        }\n    });\n};\n\nU._timeout = function(d) {\n    return new Promise(function(resolve) {\n        setTimeout(resolve, d);\n    });\n};\n\nU._genKeypair = function(keyType) {\n    var keyopts;\n    var len = parseInt(keyType.replace(/.*?(\\d)/, '$1') || 0, 10);\n    if (/RSA/.test(keyType)) {\n        keyopts = {\n            kty: 'RSA',\n            modulusLength: len || 2048\n        };\n    } else if (/^(EC|P\\-?\\d)/i.test(keyType)) {\n        keyopts = {\n            kty: 'EC',\n            namedCurve: 'P-' + (len || 256)\n        };\n    } else {\n        // TODO put in ./errors.js\n        throw new Error('invalid key type: ' + keyType);\n    }\n\n    return Keypairs.generate(keyopts).then(function(pair) {\n        return U._jwkToSet(pair.private);\n    });\n};\n\n// TODO use ACME._importKeypair ??\nU._importKeypair = function(keypair) {\n    // this should import all formats equally well:\n    // 'object' (JWK), 'string' (private key pem), kp.privateKeyPem, kp.privateKeyJwk\n    if (keypair.private || keypair.d) {\n        return U._jwkToSet(keypair.private || keypair);\n    }\n    if (keypair.privateKeyJwk) {\n        return U._jwkToSet(keypair.privateKeyJwk);\n    }\n\n    if ('string' !== typeof keypair && !keypair.privateKeyPem) {\n        // TODO put in errors\n        throw new Error('missing private key');\n    }\n\n    return Keypairs.import({ pem: keypair.privateKeyPem || keypair }).then(\n        function(priv) {\n            if (!priv.d) {\n                throw new Error('missing private key');\n            }\n            return U._jwkToSet(priv);\n        }\n    );\n};\n\nU._jwkToSet = function(jwk) {\n    var keypair = {\n        privateKeyJwk: jwk\n    };\n    return Promise.all([\n        Keypairs.export({\n            jwk: jwk,\n            encoding: 'pem'\n        }).then(function(pem) {\n            keypair.privateKeyPem = pem;\n        }),\n        Keypairs.export({\n            jwk: jwk,\n            encoding: 'pem',\n            public: true\n        }).then(function(pem) {\n            keypair.publicKeyPem = pem;\n        }),\n        Keypairs.publish({\n            jwk: jwk\n        }).then(function(pub) {\n            keypair.publicKeyJwk = pub;\n        })\n    ]).then(function() {\n        return keypair;\n    });\n};\n\nU._attachCertInfo = function(results) {\n    var certInfo = certParser.info(results.cert);\n\n    // subject, altnames, issuedAt, expiresAt\n    Object.keys(certInfo).forEach(function(key) {\n        results[key] = certInfo[key];\n    });\n\n    return results;\n};\n\nU._certHasDomain = function(certInfo, _domain) {\n    var names = (certInfo.altnames || []).slice(0);\n    return names.some(function(name) {\n        var domain = _domain.toLowerCase();\n        name = name.toLowerCase();\n        if ('*.' === name.substr(0, 2)) {\n            name = name.substr(2);\n            domain = domain\n                .split('.')\n                .slice(1)\n                .join('.');\n        }\n        return name === domain;\n    });\n};\n\n// a bit heavy to be labeled 'utils'... perhaps 'common' would be better?\nU._getOrCreateKeypair = function(db, subject, query, keyType, mustExist) {\n    var exists = false;\n    return db\n        .checkKeypair(query)\n        .then(function(kp) {\n            if (kp) {\n                exists = true;\n                return U._importKeypair(kp);\n            }\n\n            if (mustExist) {\n                // TODO put in errors\n                throw new Error(\n                    'required keypair not found: ' +\n                        (subject || '') +\n                        ' ' +\n                        JSON.stringify(query)\n                );\n            }\n\n            return U._genKeypair(keyType);\n        })\n        .then(function(keypair) {\n            return { exists: exists, keypair: keypair };\n        });\n};\n\nU._getKeypair = function(db, subject, query) {\n    return U._getOrCreateKeypair(db, subject, query, '', true).then(function(\n        result\n    ) {\n        return result.keypair;\n    });\n};\n"]},"metadata":{},"sourceType":"script"}