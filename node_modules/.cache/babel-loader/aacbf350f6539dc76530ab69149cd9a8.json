{"ast":null,"code":"'use strict';\n\nvar Rc = module.exports;\n\nvar fs = require('fs');\n\nvar path = require('path'); // This is only called if packageRoot is specified\n// (which it should be most of the time)\n\n\nRc._initSync = function (dirname, manager, configDir) {\n  if (!dirname) {\n    return {};\n  } // dirname / opts.packageRoot\n\n\n  var rcpath = path.resolve(dirname, '.greenlockrc');\n  var rc;\n\n  try {\n    rc = JSON.parse(fs.readFileSync(rcpath));\n  } catch (e) {\n    if ('ENOENT' !== e.code) {\n      throw e;\n    }\n\n    rc = {};\n  }\n\n  var changed = true; // In the general case the manager should be specified in the\n  // config file, which is in the config dir, but for the specific\n  // case in which all custom plugins are being used and no config\n  // dir is needed, we allow the manager to be read from the rc.\n  // ex: manager: { module: 'name', xxxx: 'xxxx' }\n\n  if (manager) {\n    if (rc.manager) {\n      if ('string' === typeof rc.manager && rc.manager !== manager || 'string' !== typeof rc.manager && rc.manager.module !== manager.module) {\n        changed = true;\n        console.info(\"changing `manager` from '%s' to '%s'\", rc.manager.module || rc.manager, manager.module || manager);\n      }\n    }\n\n    rc.manager = manager;\n  }\n\n  if (!configDir) {\n    configDir = rc.configDir;\n  }\n\n  if (configDir && configDir !== rc.configDir) {\n    if (rc.configDir) {\n      console.info(\"changing `configDir` from '%s' to '%s'\", rc.configDir, configDir);\n    }\n\n    changed = true;\n    rc.configDir = configDir;\n  } else if (!rc.configDir) {\n    changed = true;\n    configDir = './greenlock.d';\n    rc.configDir = configDir;\n  }\n\n  if (changed) {\n    fs.writeFileSync(rcpath, JSON.stringify(rc));\n  }\n\n  return rc;\n};","map":{"version":3,"sources":["/home/neil/Desktop/Programming/LetsCodeSBISD/Forwarder/node_modules/@root/greenlock/lib/rc.js"],"names":["Rc","module","exports","fs","require","path","_initSync","dirname","manager","configDir","rcpath","resolve","rc","JSON","parse","readFileSync","e","code","changed","console","info","writeFileSync","stringify"],"mappings":"AAAA;;AAEA,IAAIA,EAAE,GAAGC,MAAM,CAACC,OAAhB;;AACA,IAAIC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB,C,CAEA;AACA;;;AACAJ,EAAE,CAACM,SAAH,GAAe,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,SAA3B,EAAsC;AACjD,MAAI,CAACF,OAAL,EAAc;AACV,WAAO,EAAP;AACH,GAHgD,CAKjD;;;AACA,MAAIG,MAAM,GAAGL,IAAI,CAACM,OAAL,CAAaJ,OAAb,EAAsB,cAAtB,CAAb;AACA,MAAIK,EAAJ;;AAEA,MAAI;AACAA,IAAAA,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWX,EAAE,CAACY,YAAH,CAAgBL,MAAhB,CAAX,CAAL;AACH,GAFD,CAEE,OAAOM,CAAP,EAAU;AACR,QAAI,aAAaA,CAAC,CAACC,IAAnB,EAAyB;AACrB,YAAMD,CAAN;AACH;;AACDJ,IAAAA,EAAE,GAAG,EAAL;AACH;;AAED,MAAIM,OAAO,GAAG,IAAd,CAlBiD,CAoBjD;AACA;AACA;AACA;AACA;;AACA,MAAIV,OAAJ,EAAa;AACT,QAAII,EAAE,CAACJ,OAAP,EAAgB;AACZ,UACK,aAAa,OAAOI,EAAE,CAACJ,OAAvB,IAAkCI,EAAE,CAACJ,OAAH,KAAeA,OAAlD,IACC,aAAa,OAAOI,EAAE,CAACJ,OAAvB,IACGI,EAAE,CAACJ,OAAH,CAAWP,MAAX,KAAsBO,OAAO,CAACP,MAHtC,EAIE;AACEiB,QAAAA,OAAO,GAAG,IAAV;AACAC,QAAAA,OAAO,CAACC,IAAR,CACI,sCADJ,EAEIR,EAAE,CAACJ,OAAH,CAAWP,MAAX,IAAqBW,EAAE,CAACJ,OAF5B,EAGIA,OAAO,CAACP,MAAR,IAAkBO,OAHtB;AAKH;AACJ;;AACDI,IAAAA,EAAE,CAACJ,OAAH,GAAaA,OAAb;AACH;;AAED,MAAI,CAACC,SAAL,EAAgB;AACZA,IAAAA,SAAS,GAAGG,EAAE,CAACH,SAAf;AACH;;AAED,MAAIA,SAAS,IAAIA,SAAS,KAAKG,EAAE,CAACH,SAAlC,EAA6C;AACzC,QAAIG,EAAE,CAACH,SAAP,EAAkB;AACdU,MAAAA,OAAO,CAACC,IAAR,CACI,wCADJ,EAEIR,EAAE,CAACH,SAFP,EAGIA,SAHJ;AAKH;;AACDS,IAAAA,OAAO,GAAG,IAAV;AACAN,IAAAA,EAAE,CAACH,SAAH,GAAeA,SAAf;AACH,GAVD,MAUO,IAAI,CAACG,EAAE,CAACH,SAAR,EAAmB;AACtBS,IAAAA,OAAO,GAAG,IAAV;AACAT,IAAAA,SAAS,GAAG,eAAZ;AACAG,IAAAA,EAAE,CAACH,SAAH,GAAeA,SAAf;AACH;;AAED,MAAIS,OAAJ,EAAa;AACTf,IAAAA,EAAE,CAACkB,aAAH,CAAiBX,MAAjB,EAAyBG,IAAI,CAACS,SAAL,CAAeV,EAAf,CAAzB;AACH;;AAED,SAAOA,EAAP;AACH,CApED","sourcesContent":["'use strict';\n\nvar Rc = module.exports;\nvar fs = require('fs');\nvar path = require('path');\n\n// This is only called if packageRoot is specified\n// (which it should be most of the time)\nRc._initSync = function(dirname, manager, configDir) {\n    if (!dirname) {\n        return {};\n    }\n\n    // dirname / opts.packageRoot\n    var rcpath = path.resolve(dirname, '.greenlockrc');\n    var rc;\n\n    try {\n        rc = JSON.parse(fs.readFileSync(rcpath));\n    } catch (e) {\n        if ('ENOENT' !== e.code) {\n            throw e;\n        }\n        rc = {};\n    }\n\n    var changed = true;\n\n    // In the general case the manager should be specified in the\n    // config file, which is in the config dir, but for the specific\n    // case in which all custom plugins are being used and no config\n    // dir is needed, we allow the manager to be read from the rc.\n    // ex: manager: { module: 'name', xxxx: 'xxxx' }\n    if (manager) {\n        if (rc.manager) {\n            if (\n                ('string' === typeof rc.manager && rc.manager !== manager) ||\n                ('string' !== typeof rc.manager &&\n                    rc.manager.module !== manager.module)\n            ) {\n                changed = true;\n                console.info(\n                    \"changing `manager` from '%s' to '%s'\",\n                    rc.manager.module || rc.manager,\n                    manager.module || manager\n                );\n            }\n        }\n        rc.manager = manager;\n    }\n\n    if (!configDir) {\n        configDir = rc.configDir;\n    }\n\n    if (configDir && configDir !== rc.configDir) {\n        if (rc.configDir) {\n            console.info(\n                \"changing `configDir` from '%s' to '%s'\",\n                rc.configDir,\n                configDir\n            );\n        }\n        changed = true;\n        rc.configDir = configDir;\n    } else if (!rc.configDir) {\n        changed = true;\n        configDir = './greenlock.d';\n        rc.configDir = configDir;\n    }\n\n    if (changed) {\n        fs.writeFileSync(rcpath, JSON.stringify(rc));\n    }\n\n    return rc;\n};\n"]},"metadata":{},"sourceType":"script"}