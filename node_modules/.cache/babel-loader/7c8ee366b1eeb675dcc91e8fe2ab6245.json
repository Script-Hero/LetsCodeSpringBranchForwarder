{"ast":null,"code":"'use strict';\n\nvar Greenlock = require('../');\n\nmodule.exports.wrap = function (greenlock) {\n  greenlock.challenges = {};\n\n  greenlock.challenges.get = async function (chall) {\n    // TODO pick one and warn on the others\n    // (just here due to some backwards compat issues with early v3 plugins)\n    var servername = chall.servername || chall.altname || chall.identifier && chall.identifier.value; // TODO some sort of caching to prevent database hits?\n\n    var site = await greenlock._config({\n      servername: servername\n    });\n\n    if (!site) {\n      return null;\n    } // Hmm... this _should_ be impossible\n\n\n    if (!site.challenges || !site.challenges['http-01']) {\n      var copy = JSON.parse(JSON.stringify(site));\n      sanitizeCopiedConf(copy);\n      sanitizeCopiedConf(copy.store);\n\n      if (site.challenges) {\n        sanitizeCopiedConf(copy.challenges['http-01']);\n        sanitizeCopiedConf(copy.challenges['dns-01']);\n        sanitizeCopiedConf(copy.challenges['tls-alpn-01']);\n      }\n\n      console.warn('[Bug] Please report this error:');\n      console.warn('\\terror: http-01 challenge requested, but not even a default http-01 config exists');\n      console.warn('\\tservername:', JSON.stringify(servername));\n      console.warn('\\tsite:', JSON.stringify(copy));\n      return null;\n    }\n\n    var plugin = await Greenlock._loadChallenge(site.challenges, 'http-01');\n\n    if (!plugin) {\n      return null;\n    }\n\n    var keyAuth;\n    var keyAuthDigest;\n    var result = await plugin.get({\n      challenge: {\n        type: chall.type,\n        //hostname: chall.servername,\n        altname: chall.servername,\n        identifier: {\n          value: chall.servername\n        },\n        token: chall.token\n      }\n    });\n\n    if (result) {\n      // backwards compat that shouldn't be dropped\n      // because new v3 modules had to do this to be\n      // backwards compatible with Greenlock v2.7 at\n      // the time.\n      if (result.challenge) {\n        result = result.challenge;\n      }\n\n      keyAuth = result.keyAuthorization;\n      keyAuthDigest = result.keyAuthorizationDigest;\n    }\n\n    if (/dns/.test(chall.type)) {\n      return {\n        keyAuthorizationDigest: keyAuthDigest\n      };\n    }\n\n    return {\n      keyAuthorization: keyAuth\n    };\n  };\n};\n\nfunction sanitizeCopiedConf(copy) {\n  if (!copy) {\n    return;\n  }\n\n  Object.keys(copy).forEach(function (k) {\n    if (/(api|key|token)/i.test(k) && 'string' === typeof copy[k]) {\n      copy[k] = '**redacted**';\n    }\n  });\n  return copy;\n}","map":{"version":3,"sources":["/home/neil/Desktop/Programming/LetsCodeSBISD/Forwarder/node_modules/@root/greenlock/lib/challenges-wrapper.js"],"names":["Greenlock","require","module","exports","wrap","greenlock","challenges","get","chall","servername","altname","identifier","value","site","_config","copy","JSON","parse","stringify","sanitizeCopiedConf","store","console","warn","plugin","_loadChallenge","keyAuth","keyAuthDigest","result","challenge","type","token","keyAuthorization","keyAuthorizationDigest","test","Object","keys","forEach","k"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Greenlock = require('../');\n\nmodule.exports.wrap = function(greenlock) {\n    greenlock.challenges = {};\n    greenlock.challenges.get = async function(chall) {\n        // TODO pick one and warn on the others\n        // (just here due to some backwards compat issues with early v3 plugins)\n        var servername =\n            chall.servername ||\n            chall.altname ||\n            (chall.identifier && chall.identifier.value);\n\n        // TODO some sort of caching to prevent database hits?\n        var site = await greenlock._config({ servername: servername });\n        if (!site) {\n            return null;\n        }\n\n        // Hmm... this _should_ be impossible\n        if (!site.challenges || !site.challenges['http-01']) {\n            var copy = JSON.parse(JSON.stringify(site));\n            sanitizeCopiedConf(copy);\n            sanitizeCopiedConf(copy.store);\n            if (site.challenges) {\n                sanitizeCopiedConf(copy.challenges['http-01']);\n                sanitizeCopiedConf(copy.challenges['dns-01']);\n                sanitizeCopiedConf(copy.challenges['tls-alpn-01']);\n            }\n            console.warn('[Bug] Please report this error:');\n            console.warn(\n                '\\terror: http-01 challenge requested, but not even a default http-01 config exists'\n            );\n            console.warn('\\tservername:', JSON.stringify(servername));\n            console.warn('\\tsite:', JSON.stringify(copy));\n            return null;\n        }\n\n        var plugin = await Greenlock._loadChallenge(site.challenges, 'http-01');\n        if (!plugin) {\n            return null;\n        }\n\n        var keyAuth;\n        var keyAuthDigest;\n        var result = await plugin.get({\n            challenge: {\n                type: chall.type,\n                //hostname: chall.servername,\n                altname: chall.servername,\n                identifier: { value: chall.servername },\n                token: chall.token\n            }\n        });\n        if (result) {\n            // backwards compat that shouldn't be dropped\n            // because new v3 modules had to do this to be\n            // backwards compatible with Greenlock v2.7 at\n            // the time.\n            if (result.challenge) {\n                result = result.challenge;\n            }\n            keyAuth = result.keyAuthorization;\n            keyAuthDigest = result.keyAuthorizationDigest;\n        }\n\n        if (/dns/.test(chall.type)) {\n            return { keyAuthorizationDigest: keyAuthDigest };\n        }\n\n        return { keyAuthorization: keyAuth };\n    };\n};\n\nfunction sanitizeCopiedConf(copy) {\n    if (!copy) {\n        return;\n    }\n\n    Object.keys(copy).forEach(function(k) {\n        if (/(api|key|token)/i.test(k) && 'string' === typeof copy[k]) {\n            copy[k] = '**redacted**';\n        }\n    });\n\n    return copy;\n}\n"]},"metadata":{},"sourceType":"script"}