{"ast":null,"code":"'use strict';\n\nvar Manage = module.exports;\nvar doctor = {};\n\nvar sfs = require('safe-replace').create({\n  tmp: 'tmp',\n  bak: 'bak'\n});\n\nvar promisify = require('util').promisify;\n\nvar fs = require('fs');\n\nvar readFile = promisify(fs.readFile);\nvar statFile = promisify(fs.stat);\nvar chmodFile = promisify(fs.chmod);\n\nvar homedir = require('os').homedir();\n\nvar path = require('path');\n\nvar mkdirp = promisify(require('@root/mkdirp')); // NOTE\n// this is over-complicated to account for people\n// doing weird things, and this just being a file system\n// and wanting to be fairly sure it works and produces\n// meaningful errors\n// IMPORTANT\n// For your use case you'll probably find a better example\n// in greenlock-manager-test:\n//\n//    npm install --save greenlock-manager-test\n//    npx greenlock-manager-init\n//\n\nManage.create = function (CONF) {\n  if (!CONF) {\n    CONF = {};\n  }\n\n  if (!CONF.configFile) {\n    CONF.configFile = '~/.config/greenlock/manager.json';\n    console.info('Greenlock Manager Config File: ' + CONF.configFile);\n  }\n\n  CONF.configFile = CONF.configFile.replace('~/', homedir + '/');\n  var manage = {};\n  manage._txPromise = Promise.resolve(); // Note: all of these top-level methods are effectively mutexed\n  // You cannot call them from each other or they will deadlock\n\n  manage.defaults = manage.config = async function (conf) {\n    manage._txPromise = manage._txPromise.then(async function () {\n      var config = await Manage._getLatest(manage, CONF); // act as a getter\n\n      if (!conf) {\n        conf = JSON.parse(JSON.stringify(config.defaults));\n        return conf;\n      } // act as a setter\n\n\n      Object.keys(conf).forEach(function (k) {\n        // challenges are either both overwritten, or not set\n        // this is as it should be\n        config.defaults[k] = conf[k];\n      });\n      return manage._save(config);\n    });\n    return manage._txPromise;\n  };\n\n  manage.set = async function (args) {\n    manage._txPromise = manage._txPromise.then(async function () {\n      var config = await Manage._getLatest(manage, CONF);\n\n      manage._merge(config, config.sites[args.subject], args);\n\n      await manage._save(config);\n      return JSON.parse(JSON.stringify(config.sites[args.subject]));\n    });\n    return manage._txPromise;\n  };\n\n  manage.get = async function (args) {\n    manage._txPromise = manage._txPromise.then(async function () {\n      var config = await Manage._getLatest(manage, CONF);\n      var site;\n      Object.keys(config.sites).some(function (k) {\n        // if subject is specified, don't return anything else\n        var _site = config.sites[k]; // altnames, servername, and wildname all get rolled into one\n\n        return _site.altnames.some(function (altname) {\n          if ([args.servername, args.wildname].includes(altname)) {\n            site = _site;\n          }\n        });\n      });\n\n      if (site && !site.deletedAt) {\n        return doctor.site(config.sites, site.subject);\n      }\n\n      return null;\n    });\n    return manage._txPromise;\n  };\n\n  manage._merge = function (config, current, args) {\n    if (!current || current.deletedAt) {\n      current = config.sites[args.subject] = {\n        subject: args.subject,\n        altnames: [],\n        renewAt: 1\n      };\n    }\n\n    current.renewAt = parseInt(args.renewAt || current.renewAt, 10) || 1;\n    var oldAlts;\n    var newAlts;\n\n    if (args.altnames) {\n      // copy as to not disturb order, which matters\n      oldAlts = current.altnames.slice(0).sort();\n      newAlts = args.altnames.slice(0).sort();\n\n      if (newAlts.join() !== oldAlts.join()) {\n        // this will cause immediate renewal\n        args.renewAt = 1;\n        current.altnames = args.altnames.slice(0);\n      }\n    }\n\n    Object.keys(args).forEach(function (k) {\n      if ('altnames' === k) {\n        return;\n      }\n\n      current[k] = args[k];\n    });\n  }; // no transaction promise here because it calls set\n\n\n  manage.find = async function (args) {\n    var ours = await _find(args);\n\n    if (!CONF.find) {\n      return ours;\n    } // if the user has an overlay find function we'll do a diff\n    // between the managed state and the overlay, and choose\n    // what was found.\n\n\n    var theirs = await CONF.find(args);\n    var config = await Manage._getLatest(manage, CONF);\n    return _mergeFind(config, ours, theirs);\n  };\n\n  function _find(args) {\n    manage._txPromise = manage._txPromise.then(async function () {\n      var config = await Manage._getLatest(manage, CONF); // i.e. find certs more than 30 days old\n      //args.issuedBefore = Date.now() - 30 * 24 * 60 * 60 * 1000;\n      // i.e. find certs more that will expire in less than 45 days\n      //args.expiresBefore = Date.now() + 45 * 24 * 60 * 60 * 1000;\n\n      var issuedBefore = args.issuedBefore || Infinity;\n      var expiresBefore = args.expiresBefore || Infinity; //Date.now() + 21 * 24 * 60 * 60 * 1000;\n\n      var renewBefore = args.renewBefore || Infinity; //Date.now() + 21 * 24 * 60 * 60 * 1000;\n      // if there's anything to match, only return matches\n      // if there's nothing to match, return everything\n\n      var nameKeys = ['subject', 'altnames'];\n      var matchAll = !nameKeys.some(function (k) {\n        return k in args;\n      });\n      var querynames = (args.altnames || []).slice(0);\n      var sites = Object.keys(config.sites).filter(function (subject) {\n        var site = config.sites[subject];\n\n        if (site.deletedAt) {\n          return false;\n        }\n\n        if (site.expiresAt >= expiresBefore) {\n          return false;\n        }\n\n        if (site.issuedAt >= issuedBefore) {\n          return false;\n        }\n\n        if (site.renewAt >= renewBefore) {\n          return false;\n        } // after attribute filtering, before cert filtering\n\n\n        if (matchAll) {\n          return true;\n        } // if subject is specified, don't return anything else\n\n\n        if (site.subject === args.subject) {\n          return true;\n        } // altnames, servername, and wildname all get rolled into one\n\n\n        return site.altnames.some(function (altname) {\n          return querynames.includes(altname);\n        });\n      }).map(function (name) {\n        return doctor.site(config.sites, name);\n      });\n      return sites;\n    });\n    return manage._txPromise;\n  }\n\n  function _mergeFind(config, ours, theirs) {\n    theirs.forEach(function (_newer) {\n      var hasCurrent = ours.some(function (_older) {\n        if (_newer.subject !== _older.subject) {\n          return false;\n        } // BE SURE TO SET THIS UNDEFINED AFTERWARDS\n\n\n        _older._exists = true;\n\n        manage._merge(config, _older, _newer);\n\n        _newer = config.sites[_older.subject]; // handled the (only) match\n\n        return true;\n      });\n\n      if (hasCurrent) {\n        manage._merge(config, null, _newer);\n      }\n    }); // delete the things that are gone\n\n    ours.forEach(function (_older) {\n      if (!_older._exists) {\n        delete config.sites[_older.subject];\n      }\n\n      _older._exists = undefined;\n    });\n    manage._txPromise = manage._txPromise.then(async function () {\n      // kinda redundant to pull again, but whatever...\n      var config = await Manage._getLatest(manage, CONF);\n      await manage._save(config); // everything was either added, updated, or not different\n      // hence, this is everything\n\n      var copy = JSON.parse(JSON.stringify(config.sites));\n      return Object.keys(copy).map(function (k) {\n        return copy[k];\n      });\n    });\n    return manage._txPromise;\n  }\n\n  manage.remove = function (args) {\n    if (!args.subject) {\n      throw new Error('should have a subject for sites to remove');\n    }\n\n    manage._txPromise = manage._txPromise.then(async function () {\n      var config = await Manage._getLatest(manage, CONF);\n      var site = config.sites[args.subject];\n\n      if (!site || site.deletedAt) {\n        return null;\n      }\n\n      site.deletedAt = Date.now();\n      await manage._save(config);\n      return JSON.parse(JSON.stringify(site));\n    });\n    return manage._txPromise;\n  };\n\n  manage._config = {}; // (wrong type #1) specifically the wrong type (null)\n\n  manage._lastStat = {\n    size: null,\n    mtimeMs: null\n  };\n\n  manage._save = async function (config) {\n    await mkdirp(path.dirname(CONF.configFile)); // pretty-print the config file\n\n    var data = JSON.parse(JSON.stringify(config));\n    var sites = data.sites || {};\n    data.sites = Object.keys(sites).map(function (k) {\n      return sites[k];\n    });\n    await sfs.writeFileAsync(CONF.configFile, JSON.stringify(data, null, 2), 'utf8'); // this file may contain secrets, so keep it safe\n\n    return chmodFile(CONF.configFile, parseInt('0600', 8)).catch(function () {\n      /*ignore for Windows */\n    }).then(async function () {\n      var stat = await statFile(CONF.configFile);\n      manage._lastStat.size = stat.size;\n      manage._lastStat.mtimeMs = stat.mtimeMs;\n    });\n  };\n\n  manage.init = async function (deps) {\n    // even though we don't need it\n    manage.request = deps.request;\n    return null;\n  };\n\n  return manage;\n};\n\nManage._getLatest = function (MNG, CONF) {\n  return statFile(CONF.configFile).catch(async function (err) {\n    if ('ENOENT' !== err.code) {\n      err.context = 'manager_read';\n      throw err;\n    }\n\n    await MNG._save(doctor.config()); // (wrong type #2) specifically the wrong type (bool)\n\n    return {\n      size: false,\n      mtimeMs: false\n    };\n  }).then(async function (stat) {\n    if (stat.size === MNG._lastStat.size && stat.mtimeMs === MNG._lastStat.mtimeMs) {\n      return MNG._config;\n    }\n\n    var data = await readFile(CONF.configFile, 'utf8');\n    MNG._lastStat = stat;\n    MNG._config = JSON.parse(data);\n    return doctor.config(MNG._config);\n  });\n}; // users muck up config files, so we try to handle it gracefully.\n\n\ndoctor.config = function (config) {\n  if (!config) {\n    config = {};\n  }\n\n  if (!config.defaults) {\n    config.defaults = {};\n  }\n\n  doctor.sites(config);\n  Object.keys(config).forEach(function (key) {\n    // .greenlockrc and greenlock.json shall merge as one\n    // and be called greenlock.json because calling it\n    // .greenlockrc seems to rub people the wrong way\n    if (['manager', 'defaults', 'routes', 'sites'].includes(key)) {\n      return;\n    }\n\n    config.defaults[key] = config[key];\n    delete config[key];\n  });\n  doctor.challenges(config.defaults);\n  return config;\n};\n\ndoctor.sites = function (config) {\n  var sites = config.sites;\n\n  if (!sites) {\n    sites = {};\n  }\n\n  if (Array.isArray(config.sites)) {\n    sites = {};\n    config.sites.forEach(function (site) {\n      sites[site.subject] = site;\n    });\n  }\n\n  Object.keys(sites).forEach(function (k) {\n    doctor.site(sites, k);\n  });\n  config.sites = sites;\n};\n\ndoctor.site = function (sconfs, subject) {\n  var site = sconfs[subject];\n\n  if (!site) {\n    delete sconfs[subject];\n    site = {};\n  }\n\n  if ('string' !== typeof site.subject) {\n    console.warn('warning: deleted malformed site from config file:');\n    console.warn(JSON.stringify(site));\n    delete sconfs[subject];\n    site.subject = 'greenlock-error.example.com';\n  }\n\n  if (!Array.isArray(site.altnames)) {\n    site.altnames = [site.subject];\n  }\n\n  if (!site.renewAt) {\n    site.renewAt = 1;\n  }\n\n  return site;\n};\n\ndoctor.challenges = function (defaults) {\n  var challenges = defaults.challenges;\n\n  if (!challenges) {\n    challenges = {};\n  }\n\n  if (Array.isArray(defaults.challenges)) {\n    defaults.challenges.forEach(function (challenge) {\n      var typ = doctor.challengeType(challenge);\n      challenges[typ] = challenge;\n    });\n  }\n\n  Object.keys(challenges).forEach(function (k) {\n    doctor.challenge(challenges, k);\n  });\n  defaults.challenges = challenges;\n\n  if (!Object.keys(defaults.challenges).length) {\n    delete defaults.challenges;\n  }\n};\n\ndoctor.challengeType = function (challenge) {\n  var typ = challenge.type;\n\n  if (!typ) {\n    if (/\\bhttp-01\\b/.test(challenge.module)) {\n      typ = 'http-01';\n    } else if (/\\bdns-01\\b/.test(challenge.module)) {\n      typ = 'dns-01';\n    } else if (/\\btls-alpn-01\\b/.test(challenge.module)) {\n      typ = 'tls-alpn-01';\n    } else {\n      typ = 'error-01';\n    }\n  }\n\n  delete challenge.type;\n  return typ;\n};\n\ndoctor.challenge = function (chconfs, typ) {\n  var ch = chconfs[typ];\n\n  if (!ch) {\n    delete chconfs[typ];\n  }\n\n  return;\n};","map":{"version":3,"sources":["/home/neil/Desktop/Programming/LetsCodeSBISD/Forwarder/node_modules/greenlock-manager-fs/manager.js"],"names":["Manage","module","exports","doctor","sfs","require","create","tmp","bak","promisify","fs","readFile","statFile","stat","chmodFile","chmod","homedir","path","mkdirp","CONF","configFile","console","info","replace","manage","_txPromise","Promise","resolve","defaults","config","conf","then","_getLatest","JSON","parse","stringify","Object","keys","forEach","k","_save","set","args","_merge","sites","subject","get","site","some","_site","altnames","altname","servername","wildname","includes","deletedAt","current","renewAt","parseInt","oldAlts","newAlts","slice","sort","join","find","ours","_find","theirs","_mergeFind","issuedBefore","Infinity","expiresBefore","renewBefore","nameKeys","matchAll","querynames","filter","expiresAt","issuedAt","map","name","_newer","hasCurrent","_older","_exists","undefined","copy","remove","Error","Date","now","_config","_lastStat","size","mtimeMs","dirname","data","writeFileAsync","catch","init","deps","request","MNG","err","code","context","key","challenges","Array","isArray","sconfs","warn","challenge","typ","challengeType","length","type","test","chconfs","ch"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Manage = module.exports;\nvar doctor = {};\n\nvar sfs = require('safe-replace').create({ tmp: 'tmp', bak: 'bak' });\nvar promisify = require('util').promisify;\nvar fs = require('fs');\nvar readFile = promisify(fs.readFile);\nvar statFile = promisify(fs.stat);\nvar chmodFile = promisify(fs.chmod);\nvar homedir = require('os').homedir();\nvar path = require('path');\nvar mkdirp = promisify(require('@root/mkdirp'));\n\n// NOTE\n// this is over-complicated to account for people\n// doing weird things, and this just being a file system\n// and wanting to be fairly sure it works and produces\n// meaningful errors\n\n// IMPORTANT\n// For your use case you'll probably find a better example\n// in greenlock-manager-test:\n//\n//    npm install --save greenlock-manager-test\n//    npx greenlock-manager-init\n//\n\nManage.create = function(CONF) {\n\tif (!CONF) {\n\t\tCONF = {};\n\t}\n\tif (!CONF.configFile) {\n\t\tCONF.configFile = '~/.config/greenlock/manager.json';\n\t\tconsole.info('Greenlock Manager Config File: ' + CONF.configFile);\n\t}\n\tCONF.configFile = CONF.configFile.replace('~/', homedir + '/');\n\n\tvar manage = {};\n\n\tmanage._txPromise = Promise.resolve();\n\n\t// Note: all of these top-level methods are effectively mutexed\n\t// You cannot call them from each other or they will deadlock\n\n\tmanage.defaults = manage.config = async function(conf) {\n\t\tmanage._txPromise = manage._txPromise.then(async function() {\n\t\t\tvar config = await Manage._getLatest(manage, CONF);\n\n\t\t\t// act as a getter\n\t\t\tif (!conf) {\n\t\t\t\tconf = JSON.parse(JSON.stringify(config.defaults));\n\t\t\t\treturn conf;\n\t\t\t}\n\n\t\t\t// act as a setter\n\t\t\tObject.keys(conf).forEach(function(k) {\n\t\t\t\t// challenges are either both overwritten, or not set\n\t\t\t\t// this is as it should be\n\t\t\t\tconfig.defaults[k] = conf[k];\n\t\t\t});\n\n\t\t\treturn manage._save(config);\n\t\t});\n\n\t\treturn manage._txPromise;\n\t};\n\n\tmanage.set = async function(args) {\n\t\tmanage._txPromise = manage._txPromise.then(async function() {\n\t\t\tvar config = await Manage._getLatest(manage, CONF);\n\n\t\t\tmanage._merge(config, config.sites[args.subject], args);\n\n\t\t\tawait manage._save(config);\n\t\t\treturn JSON.parse(JSON.stringify(config.sites[args.subject]));\n\t\t});\n\n\t\treturn manage._txPromise;\n\t};\n\n\tmanage.get = async function(args) {\n\t\tmanage._txPromise = manage._txPromise.then(async function() {\n\t\t\tvar config = await Manage._getLatest(manage, CONF);\n\t\t\tvar site;\n\t\t\tObject.keys(config.sites).some(function(k) {\n\t\t\t\t// if subject is specified, don't return anything else\n\t\t\t\tvar _site = config.sites[k];\n\n\t\t\t\t// altnames, servername, and wildname all get rolled into one\n\t\t\t\treturn _site.altnames.some(function(altname) {\n\t\t\t\t\tif ([args.servername, args.wildname].includes(altname)) {\n\t\t\t\t\t\tsite = _site;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (site && !site.deletedAt) {\n\t\t\t\treturn doctor.site(config.sites, site.subject);\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\t\treturn manage._txPromise;\n\t};\n\n\tmanage._merge = function(config, current, args) {\n\t\tif (!current || current.deletedAt) {\n\t\t\tcurrent = config.sites[args.subject] = {\n\t\t\t\tsubject: args.subject,\n\t\t\t\taltnames: [],\n\t\t\t\trenewAt: 1\n\t\t\t};\n\t\t}\n\n\t\tcurrent.renewAt = parseInt(args.renewAt || current.renewAt, 10) || 1;\n\t\tvar oldAlts;\n\t\tvar newAlts;\n\t\tif (args.altnames) {\n\t\t\t// copy as to not disturb order, which matters\n\t\t\toldAlts = current.altnames.slice(0).sort();\n\t\t\tnewAlts = args.altnames.slice(0).sort();\n\n\t\t\tif (newAlts.join() !== oldAlts.join()) {\n\t\t\t\t// this will cause immediate renewal\n\t\t\t\targs.renewAt = 1;\n\t\t\t\tcurrent.altnames = args.altnames.slice(0);\n\t\t\t}\n\t\t}\n\t\tObject.keys(args).forEach(function(k) {\n\t\t\tif ('altnames' === k) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcurrent[k] = args[k];\n\t\t});\n\t};\n\n\t// no transaction promise here because it calls set\n\tmanage.find = async function(args) {\n\t\tvar ours = await _find(args);\n\t\tif (!CONF.find) {\n\t\t\treturn ours;\n\t\t}\n\n\t\t// if the user has an overlay find function we'll do a diff\n\t\t// between the managed state and the overlay, and choose\n\t\t// what was found.\n\t\tvar theirs = await CONF.find(args);\n\t\tvar config = await Manage._getLatest(manage, CONF);\n\t\treturn _mergeFind(config, ours, theirs);\n\t};\n\n\tfunction _find(args) {\n\t\tmanage._txPromise = manage._txPromise.then(async function() {\n\t\t\tvar config = await Manage._getLatest(manage, CONF);\n\t\t\t// i.e. find certs more than 30 days old\n\t\t\t//args.issuedBefore = Date.now() - 30 * 24 * 60 * 60 * 1000;\n\t\t\t// i.e. find certs more that will expire in less than 45 days\n\t\t\t//args.expiresBefore = Date.now() + 45 * 24 * 60 * 60 * 1000;\n\t\t\tvar issuedBefore = args.issuedBefore || Infinity;\n\t\t\tvar expiresBefore = args.expiresBefore || Infinity; //Date.now() + 21 * 24 * 60 * 60 * 1000;\n\t\t\tvar renewBefore = args.renewBefore || Infinity; //Date.now() + 21 * 24 * 60 * 60 * 1000;\n\n\t\t\t// if there's anything to match, only return matches\n\t\t\t// if there's nothing to match, return everything\n\t\t\tvar nameKeys = ['subject', 'altnames'];\n\t\t\tvar matchAll = !nameKeys.some(function(k) {\n\t\t\t\treturn k in args;\n\t\t\t});\n\n\t\t\tvar querynames = (args.altnames || []).slice(0);\n\n\t\t\tvar sites = Object.keys(config.sites)\n\t\t\t\t.filter(function(subject) {\n\t\t\t\t\tvar site = config.sites[subject];\n\t\t\t\t\tif (site.deletedAt) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif (site.expiresAt >= expiresBefore) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif (site.issuedAt >= issuedBefore) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif (site.renewAt >= renewBefore) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// after attribute filtering, before cert filtering\n\t\t\t\t\tif (matchAll) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\t// if subject is specified, don't return anything else\n\t\t\t\t\tif (site.subject === args.subject) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\t// altnames, servername, and wildname all get rolled into one\n\t\t\t\t\treturn site.altnames.some(function(altname) {\n\t\t\t\t\t\treturn querynames.includes(altname);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.map(function(name) {\n\t\t\t\t\treturn doctor.site(config.sites, name);\n\t\t\t\t});\n\n\t\t\treturn sites;\n\t\t});\n\n\t\treturn manage._txPromise;\n\t}\n\n\tfunction _mergeFind(config, ours, theirs) {\n\t\ttheirs.forEach(function(_newer) {\n\t\t\tvar hasCurrent = ours.some(function(_older) {\n\t\t\t\tif (_newer.subject !== _older.subject) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// BE SURE TO SET THIS UNDEFINED AFTERWARDS\n\t\t\t\t_older._exists = true;\n\n\t\t\t\tmanage._merge(config, _older, _newer);\n\t\t\t\t_newer = config.sites[_older.subject];\n\n\t\t\t\t// handled the (only) match\n\t\t\t\treturn true;\n\t\t\t});\n\t\t\tif (hasCurrent) {\n\t\t\t\tmanage._merge(config, null, _newer);\n\t\t\t}\n\t\t});\n\n\t\t// delete the things that are gone\n\t\tours.forEach(function(_older) {\n\t\t\tif (!_older._exists) {\n\t\t\t\tdelete config.sites[_older.subject];\n\t\t\t}\n\t\t\t_older._exists = undefined;\n\t\t});\n\n\t\tmanage._txPromise = manage._txPromise.then(async function() {\n\t\t\t// kinda redundant to pull again, but whatever...\n\t\t\tvar config = await Manage._getLatest(manage, CONF);\n\t\t\tawait manage._save(config);\n\t\t\t// everything was either added, updated, or not different\n\t\t\t// hence, this is everything\n\t\t\tvar copy = JSON.parse(JSON.stringify(config.sites));\n\t\t\treturn Object.keys(copy).map(function(k) {\n\t\t\t\treturn copy[k];\n\t\t\t});\n\t\t});\n\n\t\treturn manage._txPromise;\n\t}\n\n\tmanage.remove = function(args) {\n\t\tif (!args.subject) {\n\t\t\tthrow new Error('should have a subject for sites to remove');\n\t\t}\n\t\tmanage._txPromise = manage._txPromise.then(async function() {\n\t\t\tvar config = await Manage._getLatest(manage, CONF);\n\t\t\tvar site = config.sites[args.subject];\n\t\t\tif (!site || site.deletedAt) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tsite.deletedAt = Date.now();\n\t\t\tawait manage._save(config);\n\t\t\treturn JSON.parse(JSON.stringify(site));\n\t\t});\n\t\treturn manage._txPromise;\n\t};\n\n\tmanage._config = {};\n\t// (wrong type #1) specifically the wrong type (null)\n\tmanage._lastStat = { size: null, mtimeMs: null };\n\n\tmanage._save = async function(config) {\n\t\tawait mkdirp(path.dirname(CONF.configFile));\n\t\t// pretty-print the config file\n\t\tvar data = JSON.parse(JSON.stringify(config));\n\t\tvar sites = data.sites || {};\n\t\tdata.sites = Object.keys(sites).map(function(k) {\n\t\t\treturn sites[k];\n\t\t});\n\t\tawait sfs.writeFileAsync(\n\t\t\tCONF.configFile,\n\t\t\tJSON.stringify(data, null, 2),\n\t\t\t'utf8'\n\t\t);\n\n\t\t// this file may contain secrets, so keep it safe\n\t\treturn chmodFile(CONF.configFile, parseInt('0600', 8))\n\t\t\t.catch(function() {\n\t\t\t\t/*ignore for Windows */\n\t\t\t})\n\t\t\t.then(async function() {\n\t\t\t\tvar stat = await statFile(CONF.configFile);\n\t\t\t\tmanage._lastStat.size = stat.size;\n\t\t\t\tmanage._lastStat.mtimeMs = stat.mtimeMs;\n\t\t\t});\n\t};\n\n\tmanage.init = async function(deps) {\n\t\t// even though we don't need it\n\t\tmanage.request = deps.request;\n\t\treturn null;\n\t};\n\n\treturn manage;\n};\n\nManage._getLatest = function(MNG, CONF) {\n\treturn statFile(CONF.configFile)\n\t\t.catch(async function(err) {\n\t\t\tif ('ENOENT' !== err.code) {\n\t\t\t\terr.context = 'manager_read';\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tawait MNG._save(doctor.config());\n\t\t\t// (wrong type #2) specifically the wrong type (bool)\n\t\t\treturn { size: false, mtimeMs: false };\n\t\t})\n\t\t.then(async function(stat) {\n\t\t\tif (\n\t\t\t\tstat.size === MNG._lastStat.size &&\n\t\t\t\tstat.mtimeMs === MNG._lastStat.mtimeMs\n\t\t\t) {\n\t\t\t\treturn MNG._config;\n\t\t\t}\n\t\t\tvar data = await readFile(CONF.configFile, 'utf8');\n\t\t\tMNG._lastStat = stat;\n\t\t\tMNG._config = JSON.parse(data);\n\t\t\treturn doctor.config(MNG._config);\n\t\t});\n};\n\n// users muck up config files, so we try to handle it gracefully.\ndoctor.config = function(config) {\n\tif (!config) {\n\t\tconfig = {};\n\t}\n\tif (!config.defaults) {\n\t\tconfig.defaults = {};\n\t}\n\n\tdoctor.sites(config);\n\n\tObject.keys(config).forEach(function(key) {\n\t\t// .greenlockrc and greenlock.json shall merge as one\n\t\t// and be called greenlock.json because calling it\n\t\t// .greenlockrc seems to rub people the wrong way\n\t\tif (['manager', 'defaults', 'routes', 'sites'].includes(key)) {\n\t\t\treturn;\n\t\t}\n\t\tconfig.defaults[key] = config[key];\n\t\tdelete config[key];\n\t});\n\n\tdoctor.challenges(config.defaults);\n\n\treturn config;\n};\ndoctor.sites = function(config) {\n\tvar sites = config.sites;\n\tif (!sites) {\n\t\tsites = {};\n\t}\n\tif (Array.isArray(config.sites)) {\n\t\tsites = {};\n\t\tconfig.sites.forEach(function(site) {\n\t\t\tsites[site.subject] = site;\n\t\t});\n\t}\n\tObject.keys(sites).forEach(function(k) {\n\t\tdoctor.site(sites, k);\n\t});\n\tconfig.sites = sites;\n};\ndoctor.site = function(sconfs, subject) {\n\tvar site = sconfs[subject];\n\tif (!site) {\n\t\tdelete sconfs[subject];\n\t\tsite = {};\n\t}\n\n\tif ('string' !== typeof site.subject) {\n\t\tconsole.warn('warning: deleted malformed site from config file:');\n\t\tconsole.warn(JSON.stringify(site));\n\t\tdelete sconfs[subject];\n\t\tsite.subject = 'greenlock-error.example.com';\n\t}\n\tif (!Array.isArray(site.altnames)) {\n\t\tsite.altnames = [site.subject];\n\t}\n\tif (!site.renewAt) {\n\t\tsite.renewAt = 1;\n\t}\n\n\treturn site;\n};\n\ndoctor.challenges = function(defaults) {\n\tvar challenges = defaults.challenges;\n\tif (!challenges) {\n\t\tchallenges = {};\n\t}\n\tif (Array.isArray(defaults.challenges)) {\n\t\tdefaults.challenges.forEach(function(challenge) {\n\t\t\tvar typ = doctor.challengeType(challenge);\n\t\t\tchallenges[typ] = challenge;\n\t\t});\n\t}\n\tObject.keys(challenges).forEach(function(k) {\n\t\tdoctor.challenge(challenges, k);\n\t});\n\tdefaults.challenges = challenges;\n\tif (!Object.keys(defaults.challenges).length) {\n\t\tdelete defaults.challenges;\n\t}\n};\ndoctor.challengeType = function(challenge) {\n\tvar typ = challenge.type;\n\tif (!typ) {\n\t\tif (/\\bhttp-01\\b/.test(challenge.module)) {\n\t\t\ttyp = 'http-01';\n\t\t} else if (/\\bdns-01\\b/.test(challenge.module)) {\n\t\t\ttyp = 'dns-01';\n\t\t} else if (/\\btls-alpn-01\\b/.test(challenge.module)) {\n\t\t\ttyp = 'tls-alpn-01';\n\t\t} else {\n\t\t\ttyp = 'error-01';\n\t\t}\n\t}\n\tdelete challenge.type;\n\treturn typ;\n};\ndoctor.challenge = function(chconfs, typ) {\n\tvar ch = chconfs[typ];\n\tif (!ch) {\n\t\tdelete chconfs[typ];\n\t}\n\treturn;\n};\n"]},"metadata":{},"sourceType":"script"}