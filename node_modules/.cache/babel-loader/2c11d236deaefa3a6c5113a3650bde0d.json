{"ast":null,"code":"'use strict';\n\nvar U = require('../utils.js');\n\nvar E = require('../errors.js');\n\nvar warned = {}; // The purpose of this file is to try to auto-build\n// partial managers so that the external API can be smaller.\n\nmodule.exports.wrap = function (greenlock, gconf) {\n  var myFind = gconf.find;\n  delete gconf.find;\n  var mega = mergeManager(greenlock, gconf);\n  greenlock.manager = {};\n  greenlock.sites = {}; //greenlock.accounts = {};\n  //greenlock.certs = {};\n\n  greenlock.manager._modulename = gconf.manager.module;\n\n  if ('/' === String(gconf.manager.module)[0]) {\n    greenlock.manager._modulename = require('path').relative(gconf.packageRoot, greenlock.manager._modulename);\n\n    if ('.' !== String(greenlock.manager._modulename)[0]) {\n      greenlock.manager._modulename = './' + greenlock.manager._modulename;\n    }\n  }\n\n  var allowed = ['accountKeyType', //: [\"P-256\", \"RSA-2048\"],\n  'serverKeyType', //: [\"RSA-2048\", \"P-256\"],\n  'store', // : { module, specific opts },\n  'challenges', // : { \"http-01\", \"dns-01\", \"tls-alpn-01\" },\n  'subscriberEmail', 'agreeToTerms', 'agreeTos', 'customerEmail', 'renewOffset', 'renewStagger', 'module', // not allowed, just ignored\n  'manager']; // get / set default site settings such as\n  // subscriberEmail, store, challenges, renewOffset, renewStagger\n\n  greenlock.manager.defaults = function (conf) {\n    return greenlock._init().then(function () {\n      if (!conf) {\n        return mega.defaults();\n      }\n\n      if (conf.sites) {\n        throw new Error('cannot set sites as global config');\n      }\n\n      if (conf.routes) {\n        throw new Error('cannot set routes as global config');\n      } // disallow keys we know to be bad\n\n\n      ['subject', 'deletedAt', 'altnames', 'lastAttemptAt', 'expiresAt', 'issuedAt', 'renewAt', 'sites', 'routes'].some(function (k) {\n        if (k in conf) {\n          throw new Error('`' + k + '` not allowed as a default setting');\n        }\n      });\n      Object.keys(conf).forEach(function (k) {\n        if (!allowed.includes(k) && !warned[k]) {\n          warned[k] = true;\n          console.warn(k + \" isn't a known key. Please open an issue and let us know the use case.\");\n        }\n      });\n      Object.keys(conf).forEach(function (k) {\n        if (-1 !== ['module', 'manager'].indexOf(k)) {\n          return;\n        }\n\n        if ('undefined' === typeof k) {\n          throw new Error(\"'\" + k + \"' should be set to a value, or `null`, but not left `undefined`\");\n        }\n      });\n      return mega.defaults(conf);\n    });\n  };\n\n  greenlock.manager._defaults = function (opts) {\n    return mega.defaults(opts);\n  };\n\n  greenlock.manager.add = function (args) {\n    if (!args || !Array.isArray(args.altnames) || !args.altnames.length) {\n      throw new Error('you must specify `altnames` when adding a new site');\n    }\n\n    if (args.renewAt) {\n      throw new Error('you cannot specify `renewAt` when adding a new site');\n    }\n\n    return greenlock.manager.set(args);\n  }; // TODO agreeToTerms should be handled somewhere... maybe?\n  // Add and update remains because I said I had locked the API\n\n\n  greenlock.manager.set = greenlock.manager.update = function (args) {\n    return greenlock._init().then(function () {\n      // The goal is to make this decently easy to manage by hand without mistakes\n      // but also reasonably easy to error check and correct\n      // and to make deterministic auto-corrections\n      args.subject = checkSubject(args); //var subscriberEmail = args.subscriberEmail;\n      // TODO shortcut the other array checks when not necessary\n\n      if (Array.isArray(args.altnames)) {\n        args.altnames = checkAltnames(args.subject, args);\n      } // at this point we know that subject is the first of altnames\n\n\n      return Promise.all((args.altnames || []).map(function (d) {\n        d = d.replace('*.', '');\n        return U._validDomain(d);\n      })).then(function () {\n        if (!U._uniqueNames(args.altnames || [])) {\n          throw E.NOT_UNIQUE('add', \"'\" + args.altnames.join(\"' '\") + \"'\");\n        } // durations\n\n\n        if (args.renewOffset) {\n          args.renewOffset = U._parseDuration(args.renewOffset);\n        }\n\n        if (args.renewStagger) {\n          args.renewStagger = U._parseDuration(args.renewStagger);\n        }\n\n        return mega.set(args).then(function (result) {\n          if (!gconf._bin_mode) {\n            greenlock.renew({}).catch(function (err) {\n              if (!err.context) {\n                err.contxt = 'renew';\n              }\n\n              greenlock._notify('error', err);\n            });\n          }\n\n          return result;\n        });\n      });\n    });\n  };\n\n  greenlock.manager.get = greenlock.sites.get = function (args) {\n    return Promise.resolve().then(function () {\n      if (args.subject) {\n        throw new Error('get({ servername }) searches certificates by altnames, not by subject specifically');\n      }\n\n      if (args.servernames || args.altnames || args.renewBefore) {\n        throw new Error('get({ servername }) does not take arguments that could lead to multiple results');\n      }\n\n      return mega.get(args);\n    });\n  };\n\n  greenlock.manager.remove = function (args) {\n    return Promise.resolve().then(function () {\n      args.subject = checkSubject(args);\n\n      if (args.servername) {\n        throw new Error('remove() should be called with `subject` only, if you wish to remove altnames use `update()`');\n      }\n\n      if (args.altnames) {\n        throw new Error('remove() should be called with `subject` only, not `altnames`');\n      } // TODO check no altnames\n\n\n      return mega.remove(args);\n    });\n  };\n  /*\n  {\n      subject: site.subject,\n      altnames: site.altnames,\n      //issuedAt: site.issuedAt,\n      //expiresAt: site.expiresAt,\n      renewOffset: site.renewOffset,\n      renewStagger: site.renewStagger,\n      renewAt: site.renewAt,\n      subscriberEmail: site.subscriberEmail,\n      customerEmail: site.customerEmail,\n      challenges: site.challenges,\n      store: site.store\n  };\n  */\n  // no transaction promise here because it calls set\n\n\n  greenlock._find = async function (args) {\n    args = _mangleFindArgs(args);\n    var ours = await mega.find(args);\n\n    if (!myFind) {\n      return ours;\n    } // if the user has an overlay find function we'll do a diff\n    // between the managed state and the overlay, and choose\n    // what was found.\n\n\n    var theirs = await myFind(args);\n    theirs = theirs.filter(function (site) {\n      if (!site || 'string' !== typeof site.subject) {\n        throw new Error('found site is missing subject');\n      }\n\n      if (!Array.isArray(site.altnames) || !site.altnames.length || !site.altnames[0] || site.altnames[0] !== site.subject) {\n        throw new Error('missing or malformed altnames');\n      }\n\n      ['renewAt', 'issuedAt', 'expiresAt'].forEach(function (k) {\n        if (site[k]) {\n          throw new Error('`' + k + '` should be updated by `set()`, not by `find()`');\n        }\n      });\n\n      if (!site) {\n        return;\n      }\n\n      if (args.subject && site.subject !== args.subject) {\n        return false;\n      }\n\n      var servernames = args.servernames || args.altnames;\n\n      if (servernames && !site.altnames.some(function (altname) {\n        return servernames.includes(altname);\n      })) {\n        return false;\n      }\n\n      return site.renewAt < (args.renewBefore || Infinity);\n    });\n    return _mergeFind(ours, theirs);\n  };\n\n  function _mergeFind(ours, theirs) {\n    var toUpdate = [];\n    theirs.forEach(function (_newer) {\n      var hasCurrent = ours.some(function (_older) {\n        var changed = false;\n\n        if (_newer.subject !== _older.subject) {\n          return false;\n        } // BE SURE TO SET THIS UNDEFINED AFTERWARDS\n\n\n        _older._exists = true;\n        _newer.deletedAt = _newer.deletedAt || 0;\n        Object.keys(_newer).forEach(function (k) {\n          if (_older[k] !== _newer[k]) {\n            changed = true;\n            _older[k] = _newer[k];\n          }\n        });\n\n        if (changed) {\n          toUpdate.push(_older);\n        } // handled the (only) match\n\n\n        return true;\n      });\n\n      if (!hasCurrent) {\n        toUpdate.push(_newer);\n      }\n    }); // delete the things that are gone\n\n    ours.forEach(function (_older) {\n      if (!_older._exists) {\n        _older.deletedAt = Date.now();\n        toUpdate.push(_older);\n      }\n\n      _older._exists = undefined;\n    });\n    Promise.all(toUpdate.map(function (site) {\n      return greenlock.sites.update(site).catch(function (err) {\n        console.error('Developer Error: cannot update sites from user-supplied `find()`:');\n        console.error(err);\n      });\n    })); // ours is updated from theirs\n\n    return ours;\n  }\n\n  greenlock.manager.init = mega.init;\n};\n\nfunction checkSubject(args) {\n  if (!args || !args.subject) {\n    throw new Error('you must specify `subject` when configuring a site');\n  }\n  /*\n  if (!args.subject) {\n  throw E.NO_SUBJECT('add');\n  }\n  */\n\n\n  var subject = (args.subject || '').toLowerCase();\n\n  if (subject !== args.subject) {\n    console.warn('`subject` must be lowercase', args.subject);\n  }\n\n  return U._encodeName(subject);\n}\n\nfunction checkAltnames(subject, args) {\n  // the things we have to check and get right\n  var altnames = (args.altnames || []).map(function (name) {\n    return String(name || '').toLowerCase();\n  }); // punycode BEFORE validation\n  // (set, find, remove)\n\n  if (altnames.join() !== args.altnames.join()) {\n    console.warn('all domains in `altnames` must be lowercase:', args.altnames);\n  }\n\n  args.altnames = args.altnames.map(U._encodeName);\n\n  if (!args.altnames.every(function (d) {\n    return U._validName(d);\n  })) {\n    throw E.INVALID_HOSTNAME('add', \"'\" + args.altnames.join(\"' '\") + \"'\");\n  }\n\n  if (subject && subject !== args.altnames[0]) {\n    throw E.BAD_ORDER('add', '(' + args.subject + \") '\" + args.altnames.join(\"' '\") + \"'\");\n  }\n  /*\n  if (subject && subject !== altnames[0]) {\n      throw new Error(\n          '`subject` must be the first domain in `altnames`',\n          args.subject,\n          altnames.join(' ')\n      );\n  }\n  */\n\n\n  return altnames;\n}\n\nfunction loadManager(gconf) {\n  var m; // 1. Get the manager\n  // 2. Figure out if we need to wrap it\n\n  /*\n  if (!gconf.manager) {\n      gconf.manager = '@greenlock/manager';\n  }\n   if ('string' !== typeof gconf.manager) {\n      throw new Error(\n          '`manager` should be a string representing the npm name or file path of the module'\n      );\n  }\n  */\n\n  try {\n    // wrap this to be safe for @greenlock/manager\n    m = require(gconf.manager.module).create(gconf.manager);\n  } catch (e) {\n    console.error('Error loading manager:');\n    console.error(e.code);\n    console.error(e.message);\n  }\n\n  if (!m) {\n    console.error();\n    console.error('Failed to load manager plugin ', JSON.stringify(gconf.manager));\n    console.error();\n    process.exit(1);\n  }\n\n  return m;\n}\n\nfunction mergeManager(greenlock, gconf) {\n  var mng;\n\n  function m() {\n    if (mng) {\n      return mng;\n    }\n\n    mng = require('@greenlock/manager').create(gconf);\n    return mng;\n  }\n\n  var mini = loadManager(gconf);\n  var mega = {}; // optional\n\n  if (mini.defaults) {\n    mega.defaults = function (opts) {\n      return mini.defaults(opts);\n    };\n  } else {\n    mega.defaults = m().defaults;\n  } // optional\n\n\n  if (mini.remove) {\n    mega.remove = function (opts) {\n      return mini.remove(opts);\n    };\n  } else {\n    mega.remove = function (opts) {\n      mega.get(opts).then(function (site) {\n        if (!site) {\n          return null;\n        }\n\n        site.deletedAt = Date.now();\n        return mega.set(site).then(function () {\n          return site;\n        });\n      });\n    };\n  }\n\n  if (mini.find) {\n    // without this there cannot be fully automatic renewal\n    mega.find = function (opts) {\n      return mini.find(opts);\n    };\n  } // set and (find and/or get) should be from the same set\n\n\n  if (mini.set) {\n    mega.set = function (opts) {\n      if (!mini.find) {// TODO create the list so that find can be implemented\n      }\n\n      return mini.set(opts);\n    };\n  } else {\n    mega.set = m().set;\n    mega.get = m().get;\n  }\n\n  if (mini.get) {\n    mega.get = async function (opts) {\n      if (mini.set) {\n        return mini.get(opts);\n      }\n\n      if (!mega._get) {\n        mega._get = m().get;\n      }\n\n      var existing = await mega._get(opts);\n      var site = await mini.get(opts);\n\n      if (!existing) {\n        // Add\n        if (!site) {\n          return;\n        }\n\n        site.renewAt = 1;\n        site.deletedAt = 0;\n        await mega.set(site);\n        existing = await mega._get(opts);\n      } else if (!site) {\n        // Delete\n        existing.deletedAt = site.deletedAt || Date.now();\n        await mega.set(existing);\n        existing = null;\n      } else if (site.subject !== existing.subject || site.altnames.join(' ') !== existing.altnames.join(' ')) {\n        // Update\n        site.renewAt = 1;\n        site.deletedAt = 0;\n        await mega.set(site);\n        existing = await mega._get(opts);\n\n        if (!existing) {\n          throw new Error('failed to `get` after `set`');\n        }\n      }\n\n      return existing;\n    };\n  } else if (mini.find) {\n    mega.get = function (opts) {\n      var servername = opts.servername;\n      delete opts.servername;\n      opts.servernames = servername && [servername] || undefined;\n      return mini.find(opts).then(function (sites) {\n        return sites.filter(function (site) {\n          return site.altnames.include(servername);\n        })[0];\n      });\n    };\n  } else if (mini.set) {\n    throw new Error(gconf.manager.module + ' implements `set()`, but not `get()` or `find()`');\n  } else {\n    mega.find = m().find;\n    mega.get = m().get;\n  }\n\n  if (!mega.find) {\n    mega._nofind = false;\n\n    mega.find = async function (opts) {\n      if (!mega._nofind) {\n        console.warn('Warning: manager `' + greenlock.manager._modulename + '` does not implement `find({})`\\n');\n        mega._nofind = true;\n      }\n\n      return [];\n    };\n  }\n\n  if (!mega.get) {\n    mega.get = function (opts) {\n      var servername = opts.servername;\n      delete opts.servername;\n      opts.servernames = servername && [servername] || undefined;\n      return mega.find(opts).then(function (sites) {\n        return sites.filter(function (site) {\n          return site.altnames.include(servername);\n        })[0];\n      });\n    };\n  }\n\n  mega.init = function (deps) {\n    if (mini.init) {\n      return mini.init(deps).then(function () {\n        if (mng) {\n          return mng.init(deps);\n        }\n      });\n    } else if (mng) {\n      return mng.init(deps);\n    } else {\n      return Promise.resolve(null);\n    }\n  };\n\n  return mega;\n}\n\nfunction _mangleFindArgs(args) {\n  var servernames = (args.servernames || []).concat(args.altnames || []).filter(Boolean).slice(0);\n  var modified = servernames.slice(0); // servername, wildname, and altnames are all the same\n\n  ['wildname', 'servername'].forEach(function (k) {\n    var altname = args[k] || '';\n\n    if (altname && !modified.includes(altname)) {\n      modified.push(altname);\n    }\n  });\n\n  if (modified.length) {\n    servernames = modified;\n    servernames = servernames.map(U._encodeName);\n    args.altnames = servernames;\n    args.servernames = args.altnames = checkAltnames(false, args);\n  } // documented as args.servernames\n  // preserved as args.altnames for v3 beta backwards compat\n  // my only hesitancy in this choice is that a \"servername\"\n  // may NOT contain '*.', in which case `altnames` is a better choice.\n  // However, `altnames` is ambiguous - as if it means to find a\n  // certificate by that specific collection of altnames.\n  // ... perhaps `domains` could work?\n\n\n  return args;\n}","map":{"version":3,"sources":["/home/neil/Desktop/Programming/LetsCodeSBISD/Forwarder/node_modules/@root/greenlock/lib/manager-wrapper.js"],"names":["U","require","E","warned","module","exports","wrap","greenlock","gconf","myFind","find","mega","mergeManager","manager","sites","_modulename","String","relative","packageRoot","allowed","defaults","conf","_init","then","Error","routes","some","k","Object","keys","forEach","includes","console","warn","indexOf","_defaults","opts","add","args","Array","isArray","altnames","length","renewAt","set","update","subject","checkSubject","checkAltnames","Promise","all","map","d","replace","_validDomain","_uniqueNames","NOT_UNIQUE","join","renewOffset","_parseDuration","renewStagger","result","_bin_mode","renew","catch","err","context","contxt","_notify","get","resolve","servernames","renewBefore","remove","servername","_find","_mangleFindArgs","ours","theirs","filter","site","altname","Infinity","_mergeFind","toUpdate","_newer","hasCurrent","_older","changed","_exists","deletedAt","push","Date","now","undefined","error","init","toLowerCase","_encodeName","name","every","_validName","INVALID_HOSTNAME","BAD_ORDER","loadManager","m","create","e","code","message","JSON","stringify","process","exit","mng","mini","_get","existing","include","_nofind","deps","concat","Boolean","slice","modified"],"mappings":"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","sourcesContent":["'use strict';\n\nvar U = require('../utils.js');\nvar E = require('../errors.js');\n\nvar warned = {};\n\n// The purpose of this file is to try to auto-build\n// partial managers so that the external API can be smaller.\n\nmodule.exports.wrap = function(greenlock, gconf) {\n    var myFind = gconf.find;\n    delete gconf.find;\n\n    var mega = mergeManager(greenlock, gconf);\n\n    greenlock.manager = {};\n    greenlock.sites = {};\n    //greenlock.accounts = {};\n    //greenlock.certs = {};\n\n    greenlock.manager._modulename = gconf.manager.module;\n    if ('/' === String(gconf.manager.module)[0]) {\n        greenlock.manager._modulename = require('path').relative(\n            gconf.packageRoot,\n            greenlock.manager._modulename\n        );\n        if ('.' !== String(greenlock.manager._modulename)[0]) {\n            greenlock.manager._modulename =\n                './' + greenlock.manager._modulename;\n        }\n    }\n\n    var allowed = [\n        'accountKeyType', //: [\"P-256\", \"RSA-2048\"],\n        'serverKeyType', //: [\"RSA-2048\", \"P-256\"],\n        'store', // : { module, specific opts },\n        'challenges', // : { \"http-01\", \"dns-01\", \"tls-alpn-01\" },\n        'subscriberEmail',\n        'agreeToTerms',\n        'agreeTos',\n        'customerEmail',\n        'renewOffset',\n        'renewStagger',\n        'module', // not allowed, just ignored\n        'manager'\n    ];\n\n    // get / set default site settings such as\n    // subscriberEmail, store, challenges, renewOffset, renewStagger\n    greenlock.manager.defaults = function(conf) {\n        return greenlock._init().then(function() {\n            if (!conf) {\n                return mega.defaults();\n            }\n\n            if (conf.sites) {\n                throw new Error('cannot set sites as global config');\n            }\n            if (conf.routes) {\n                throw new Error('cannot set routes as global config');\n            }\n\n            // disallow keys we know to be bad\n            [\n                'subject',\n                'deletedAt',\n                'altnames',\n                'lastAttemptAt',\n                'expiresAt',\n                'issuedAt',\n                'renewAt',\n                'sites',\n                'routes'\n            ].some(function(k) {\n                if (k in conf) {\n                    throw new Error(\n                        '`' + k + '` not allowed as a default setting'\n                    );\n                }\n            });\n            Object.keys(conf).forEach(function(k) {\n                if (!allowed.includes(k) && !warned[k]) {\n                    warned[k] = true;\n                    console.warn(\n                        k +\n                            \" isn't a known key. Please open an issue and let us know the use case.\"\n                    );\n                }\n            });\n\n            Object.keys(conf).forEach(function(k) {\n                if (-1 !== ['module', 'manager'].indexOf(k)) {\n                    return;\n                }\n\n                if ('undefined' === typeof k) {\n                    throw new Error(\n                        \"'\" +\n                            k +\n                            \"' should be set to a value, or `null`, but not left `undefined`\"\n                    );\n                }\n            });\n\n            return mega.defaults(conf);\n        });\n    };\n\n    greenlock.manager._defaults = function(opts) {\n        return mega.defaults(opts);\n    };\n\n    greenlock.manager.add = function(args) {\n        if (!args || !Array.isArray(args.altnames) || !args.altnames.length) {\n            throw new Error(\n                'you must specify `altnames` when adding a new site'\n            );\n        }\n        if (args.renewAt) {\n            throw new Error(\n                'you cannot specify `renewAt` when adding a new site'\n            );\n        }\n\n        return greenlock.manager.set(args);\n    };\n\n    // TODO agreeToTerms should be handled somewhere... maybe?\n\n    // Add and update remains because I said I had locked the API\n    greenlock.manager.set = greenlock.manager.update = function(args) {\n        return greenlock._init().then(function() {\n            // The goal is to make this decently easy to manage by hand without mistakes\n            // but also reasonably easy to error check and correct\n            // and to make deterministic auto-corrections\n\n            args.subject = checkSubject(args);\n\n            //var subscriberEmail = args.subscriberEmail;\n\n            // TODO shortcut the other array checks when not necessary\n            if (Array.isArray(args.altnames)) {\n                args.altnames = checkAltnames(args.subject, args);\n            }\n\n            // at this point we know that subject is the first of altnames\n            return Promise.all(\n                (args.altnames || []).map(function(d) {\n                    d = d.replace('*.', '');\n                    return U._validDomain(d);\n                })\n            ).then(function() {\n                if (!U._uniqueNames(args.altnames || [])) {\n                    throw E.NOT_UNIQUE(\n                        'add',\n                        \"'\" + args.altnames.join(\"' '\") + \"'\"\n                    );\n                }\n\n                // durations\n                if (args.renewOffset) {\n                    args.renewOffset = U._parseDuration(args.renewOffset);\n                }\n                if (args.renewStagger) {\n                    args.renewStagger = U._parseDuration(args.renewStagger);\n                }\n\n                return mega.set(args).then(function(result) {\n                    if (!gconf._bin_mode) {\n                        greenlock.renew({}).catch(function(err) {\n                            if (!err.context) {\n                                err.contxt = 'renew';\n                            }\n                            greenlock._notify('error', err);\n                        });\n                    }\n                    return result;\n                });\n            });\n        });\n    };\n\n    greenlock.manager.get = greenlock.sites.get = function(args) {\n        return Promise.resolve().then(function() {\n            if (args.subject) {\n                throw new Error(\n                    'get({ servername }) searches certificates by altnames, not by subject specifically'\n                );\n            }\n            if (args.servernames || args.altnames || args.renewBefore) {\n                throw new Error(\n                    'get({ servername }) does not take arguments that could lead to multiple results'\n                );\n            }\n            return mega.get(args);\n        });\n    };\n\n    greenlock.manager.remove = function(args) {\n        return Promise.resolve().then(function() {\n            args.subject = checkSubject(args);\n            if (args.servername) {\n                throw new Error(\n                    'remove() should be called with `subject` only, if you wish to remove altnames use `update()`'\n                );\n            }\n            if (args.altnames) {\n                throw new Error(\n                    'remove() should be called with `subject` only, not `altnames`'\n                );\n            }\n            // TODO check no altnames\n            return mega.remove(args);\n        });\n    };\n\n    /*\n    {\n        subject: site.subject,\n        altnames: site.altnames,\n        //issuedAt: site.issuedAt,\n        //expiresAt: site.expiresAt,\n        renewOffset: site.renewOffset,\n        renewStagger: site.renewStagger,\n        renewAt: site.renewAt,\n        subscriberEmail: site.subscriberEmail,\n        customerEmail: site.customerEmail,\n        challenges: site.challenges,\n        store: site.store\n    };\n    */\n\n    // no transaction promise here because it calls set\n    greenlock._find = async function(args) {\n        args = _mangleFindArgs(args);\n        var ours = await mega.find(args);\n        if (!myFind) {\n            return ours;\n        }\n\n        // if the user has an overlay find function we'll do a diff\n        // between the managed state and the overlay, and choose\n        // what was found.\n        var theirs = await myFind(args);\n        theirs = theirs.filter(function(site) {\n            if (!site || 'string' !== typeof site.subject) {\n                throw new Error('found site is missing subject');\n            }\n            if (\n                !Array.isArray(site.altnames) ||\n                !site.altnames.length ||\n                !site.altnames[0] ||\n                site.altnames[0] !== site.subject\n            ) {\n                throw new Error('missing or malformed altnames');\n            }\n            ['renewAt', 'issuedAt', 'expiresAt'].forEach(function(k) {\n                if (site[k]) {\n                    throw new Error(\n                        '`' +\n                            k +\n                            '` should be updated by `set()`, not by `find()`'\n                    );\n                }\n            });\n            if (!site) {\n                return;\n            }\n            if (args.subject && site.subject !== args.subject) {\n                return false;\n            }\n\n            var servernames = args.servernames || args.altnames;\n            if (\n                servernames &&\n                !site.altnames.some(function(altname) {\n                    return servernames.includes(altname);\n                })\n            ) {\n                return false;\n            }\n\n            return site.renewAt < (args.renewBefore || Infinity);\n        });\n        return _mergeFind(ours, theirs);\n    };\n\n    function _mergeFind(ours, theirs) {\n        var toUpdate = [];\n        theirs.forEach(function(_newer) {\n            var hasCurrent = ours.some(function(_older) {\n                var changed = false;\n                if (_newer.subject !== _older.subject) {\n                    return false;\n                }\n\n                // BE SURE TO SET THIS UNDEFINED AFTERWARDS\n                _older._exists = true;\n\n                _newer.deletedAt = _newer.deletedAt || 0;\n                Object.keys(_newer).forEach(function(k) {\n                    if (_older[k] !== _newer[k]) {\n                        changed = true;\n                        _older[k] = _newer[k];\n                    }\n                });\n                if (changed) {\n                    toUpdate.push(_older);\n                }\n\n                // handled the (only) match\n                return true;\n            });\n            if (!hasCurrent) {\n                toUpdate.push(_newer);\n            }\n        });\n\n        // delete the things that are gone\n        ours.forEach(function(_older) {\n            if (!_older._exists) {\n                _older.deletedAt = Date.now();\n                toUpdate.push(_older);\n            }\n            _older._exists = undefined;\n        });\n\n        Promise.all(\n            toUpdate.map(function(site) {\n                return greenlock.sites.update(site).catch(function(err) {\n                    console.error(\n                        'Developer Error: cannot update sites from user-supplied `find()`:'\n                    );\n                    console.error(err);\n                });\n            })\n        );\n\n        // ours is updated from theirs\n        return ours;\n    }\n\n    greenlock.manager.init = mega.init;\n};\n\nfunction checkSubject(args) {\n    if (!args || !args.subject) {\n        throw new Error('you must specify `subject` when configuring a site');\n    }\n    /*\n\t\tif (!args.subject) {\n\t\t\tthrow E.NO_SUBJECT('add');\n\t\t}\n    */\n\n    var subject = (args.subject || '').toLowerCase();\n    if (subject !== args.subject) {\n        console.warn('`subject` must be lowercase', args.subject);\n    }\n\n    return U._encodeName(subject);\n}\n\nfunction checkAltnames(subject, args) {\n    // the things we have to check and get right\n    var altnames = (args.altnames || []).map(function(name) {\n        return String(name || '').toLowerCase();\n    });\n\n    // punycode BEFORE validation\n    // (set, find, remove)\n    if (altnames.join() !== args.altnames.join()) {\n        console.warn(\n            'all domains in `altnames` must be lowercase:',\n            args.altnames\n        );\n    }\n\n    args.altnames = args.altnames.map(U._encodeName);\n    if (\n        !args.altnames.every(function(d) {\n            return U._validName(d);\n        })\n    ) {\n        throw E.INVALID_HOSTNAME('add', \"'\" + args.altnames.join(\"' '\") + \"'\");\n    }\n\n    if (subject && subject !== args.altnames[0]) {\n        throw E.BAD_ORDER(\n            'add',\n            '(' + args.subject + \") '\" + args.altnames.join(\"' '\") + \"'\"\n        );\n    }\n    /*\n    if (subject && subject !== altnames[0]) {\n        throw new Error(\n            '`subject` must be the first domain in `altnames`',\n            args.subject,\n            altnames.join(' ')\n        );\n    }\n    */\n\n    return altnames;\n}\n\nfunction loadManager(gconf) {\n    var m;\n    // 1. Get the manager\n    // 2. Figure out if we need to wrap it\n\n    /*\n    if (!gconf.manager) {\n        gconf.manager = '@greenlock/manager';\n    }\n\n    if ('string' !== typeof gconf.manager) {\n        throw new Error(\n            '`manager` should be a string representing the npm name or file path of the module'\n        );\n    }\n    */\n\n    try {\n        // wrap this to be safe for @greenlock/manager\n        m = require(gconf.manager.module).create(gconf.manager);\n    } catch (e) {\n        console.error('Error loading manager:');\n        console.error(e.code);\n        console.error(e.message);\n    }\n\n    if (!m) {\n        console.error();\n        console.error(\n            'Failed to load manager plugin ',\n            JSON.stringify(gconf.manager)\n        );\n        console.error();\n        process.exit(1);\n    }\n\n    return m;\n}\n\nfunction mergeManager(greenlock, gconf) {\n    var mng;\n    function m() {\n        if (mng) {\n            return mng;\n        }\n        mng = require('@greenlock/manager').create(gconf);\n        return mng;\n    }\n\n    var mini = loadManager(gconf);\n    var mega = {};\n    // optional\n    if (mini.defaults) {\n        mega.defaults = function(opts) {\n            return mini.defaults(opts);\n        };\n    } else {\n        mega.defaults = m().defaults;\n    }\n\n    // optional\n    if (mini.remove) {\n        mega.remove = function(opts) {\n            return mini.remove(opts);\n        };\n    } else {\n        mega.remove = function(opts) {\n            mega.get(opts).then(function(site) {\n                if (!site) {\n                    return null;\n                }\n                site.deletedAt = Date.now();\n                return mega.set(site).then(function() {\n                    return site;\n                });\n            });\n        };\n    }\n\n    if (mini.find) {\n        // without this there cannot be fully automatic renewal\n        mega.find = function(opts) {\n            return mini.find(opts);\n        };\n    }\n\n    // set and (find and/or get) should be from the same set\n    if (mini.set) {\n        mega.set = function(opts) {\n            if (!mini.find) {\n                // TODO create the list so that find can be implemented\n            }\n            return mini.set(opts);\n        };\n    } else {\n        mega.set = m().set;\n        mega.get = m().get;\n    }\n\n    if (mini.get) {\n        mega.get = async function(opts) {\n            if (mini.set) {\n                return mini.get(opts);\n            }\n\n            if (!mega._get) {\n                mega._get = m().get;\n            }\n\n            var existing = await mega._get(opts);\n            var site = await mini.get(opts);\n            if (!existing) {\n                // Add\n                if (!site) {\n                    return;\n                }\n                site.renewAt = 1;\n                site.deletedAt = 0;\n                await mega.set(site);\n                existing = await mega._get(opts);\n            } else if (!site) {\n                // Delete\n                existing.deletedAt = site.deletedAt || Date.now();\n                await mega.set(existing);\n                existing = null;\n            } else if (\n                site.subject !== existing.subject ||\n                site.altnames.join(' ') !== existing.altnames.join(' ')\n            ) {\n                // Update\n                site.renewAt = 1;\n                site.deletedAt = 0;\n                await mega.set(site);\n                existing = await mega._get(opts);\n                if (!existing) {\n                    throw new Error('failed to `get` after `set`');\n                }\n            }\n\n            return existing;\n        };\n    } else if (mini.find) {\n        mega.get = function(opts) {\n            var servername = opts.servername;\n            delete opts.servername;\n            opts.servernames = (servername && [servername]) || undefined;\n            return mini.find(opts).then(function(sites) {\n                return sites.filter(function(site) {\n                    return site.altnames.include(servername);\n                })[0];\n            });\n        };\n    } else if (mini.set) {\n        throw new Error(\n            gconf.manager.module +\n                ' implements `set()`, but not `get()` or `find()`'\n        );\n    } else {\n        mega.find = m().find;\n        mega.get = m().get;\n    }\n\n    if (!mega.find) {\n        mega._nofind = false;\n        mega.find = async function(opts) {\n            if (!mega._nofind) {\n                console.warn(\n                    'Warning: manager `' +\n                        greenlock.manager._modulename +\n                        '` does not implement `find({})`\\n'\n                );\n                mega._nofind = true;\n            }\n            return [];\n        };\n    }\n\n    if (!mega.get) {\n        mega.get = function(opts) {\n            var servername = opts.servername;\n            delete opts.servername;\n            opts.servernames = (servername && [servername]) || undefined;\n            return mega.find(opts).then(function(sites) {\n                return sites.filter(function(site) {\n                    return site.altnames.include(servername);\n                })[0];\n            });\n        };\n    }\n\n    mega.init = function(deps) {\n        if (mini.init) {\n            return mini.init(deps).then(function() {\n                if (mng) {\n                    return mng.init(deps);\n                }\n            });\n        } else if (mng) {\n            return mng.init(deps);\n        } else {\n            return Promise.resolve(null);\n        }\n    };\n\n    return mega;\n}\n\nfunction _mangleFindArgs(args) {\n    var servernames = (args.servernames || [])\n        .concat(args.altnames || [])\n        .filter(Boolean)\n        .slice(0);\n    var modified = servernames.slice(0);\n\n    // servername, wildname, and altnames are all the same\n    ['wildname', 'servername'].forEach(function(k) {\n        var altname = args[k] || '';\n        if (altname && !modified.includes(altname)) {\n            modified.push(altname);\n        }\n    });\n\n    if (modified.length) {\n        servernames = modified;\n        servernames = servernames.map(U._encodeName);\n        args.altnames = servernames;\n        args.servernames = args.altnames = checkAltnames(false, args);\n    }\n\n    // documented as args.servernames\n    // preserved as args.altnames for v3 beta backwards compat\n    // my only hesitancy in this choice is that a \"servername\"\n    // may NOT contain '*.', in which case `altnames` is a better choice.\n    // However, `altnames` is ambiguous - as if it means to find a\n    // certificate by that specific collection of altnames.\n    // ... perhaps `domains` could work?\n    return args;\n}\n"]},"metadata":{},"sourceType":"script"}